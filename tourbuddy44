<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>Tour Buddy - Your Smart Heritage Guide to Sikkim</title>
<script src="https://cdn.tailwindcss.com"></script>
<style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .sikkim-gradient {
            background: linear-gradient(135deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4);
            background-size: 400% 400%;
            animation: gradient 15s ease infinite;
        }
        
        @keyframes gradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .prayer-flag {
            background: linear-gradient(45deg, #ff6b6b, #feca57, #48dbfb, #ff9ff3, #54a0ff);
            height: 4px;
            width: 100%;
        }
        
        .mountain-shadow {
            box-shadow: 0 10px 30px rgba(0,0,0,0.3), inset 0 1px 0 rgba(255,255,255,0.2);
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.8);
        }
        
        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .tour-camera {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2000;
            background: black;
        }
        
        .floating-sos {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1500;
            background: #ff4757;
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 20px;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(255, 71, 87, 0.4);
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        .sidebar {
            transform: translateX(-100%);
            transition: transform 0.3s ease;
        }
        
        .sidebar.open {
            transform: translateX(0);
        }
        
        @media (min-width: 768px) {
            .sidebar {
                transform: translateX(0);
            }
        }
    </style>
<link href="https://unpkg.com/leaflet/dist/leaflet.css" rel="stylesheet"/><script src="https://unpkg.com/leaflet/dist/leaflet.js"></script></head>
<body class="bg-gray-100">
<div class="prayer-flag"></div>
<!-- Sidebar -->
<div class="sidebar fixed left-0 top-0 h-full w-64 bg-white shadow-lg z-50 md:relative md:w-64" id="sidebar">
<div class="p-6">
<h2 class="text-xl font-bold text-gray-800 mb-6">Tour Buddy</h2>
<nav class="space-y-3">
<button class="w-full text-left px-4 py-3 rounded-lg bg-blue-50 text-blue-600 hover:bg-blue-100 transition-colors" onclick="showPage('home')">
                    üè† Home
                </button>
<button class="w-full text-left px-4 py-3 rounded-lg text-gray-600 hover:bg-gray-50 transition-colors" onclick="showPage('profile')">
                    üë§ Profile
                </button>
<button class="w-full text-left px-4 py-3 rounded-lg text-gray-600 hover:bg-gray-50 transition-colors" onclick="showDeveloperLogin()">
                    üõ† Developer Options
                </button>
<button class="w-full text-left px-4 py-3 rounded-lg text-gray-600 hover:bg-gray-50 transition-colors" onclick="showPage('calendar')">
                    üìÖ Festival Calendar
                </button>
<button class="w-full text-left px-4 py-3 rounded-lg text-gray-600 hover:bg-gray-50 transition-colors" onclick="showPage('tripPlanner')">
                    üó∫Ô∏è Trip Planner
                </button>
<button class="w-full text-left px-4 py-3 rounded-lg text-gray-600 hover:bg-gray-50 transition-colors" onclick="showPage('settings')">
                    ‚öô Settings
                </button>
<button class="w-full text-left px-4 py-3 rounded-lg text-red-600 hover:bg-red-50 transition-colors" id="logoutBtn" onclick="logout()" style="display: none;">
                    üî¥ Log Out
                </button>
</nav>
</div>
</div>
<!-- Mobile Menu Button -->
<button class="md:hidden fixed top-4 left-4 z-60 bg-white p-2 rounded-lg shadow-lg" id="mobileMenuBtn">
<svg class="w-6 h-6" fill="none" stroke="currentColor" viewbox="0 0 24 24">
<path d="M4 6h16M4 12h16M4 18h16" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"></path>
</svg>
</button>
<!-- Main Content -->
<div class="md:ml-64 min-h-screen">
<!-- Home Page -->
<div class="page p-6" id="homePage">
<div class="sikkim-gradient rounded-xl p-8 mb-8 text-white mountain-shadow">
<h1 class="text-4xl font-bold mb-4" id="appTitle">Explore Sikkim</h1>
<p class="text-xl opacity-90" id="appTagline">Discover the mystical beauty of the Himalayas</p>
</div>
<!-- Live Alerts Section -->
<div class="mb-6" id="liveAlertsSection">
<!-- Emergency Broadcast Alert -->
<div class="bg-red-100 border-2 border-red-500 p-4 mb-4 rounded-lg animate-pulse" id="emergencyBroadcast" style="display: none;">
<div class="flex items-center">
<div class="text-3xl mr-3 animate-bounce">üö®</div>
<div class="flex-1">
<h3 class="font-bold text-red-900 text-lg">EMERGENCY BROADCAST</h3>
<p class="text-red-800 font-semibold" id="emergencyBroadcastInfo"></p>
<p class="text-red-600 text-xs mt-1">Issued by Local Authorities ‚Ä¢ <span id="emergencyBroadcastTime"></span></p>
</div>
<button class="ml-auto text-red-500 hover:text-red-700 text-xl font-bold" onclick="dismissAlert('emergencyBroadcast')">√ó</button>
</div>
</div>
<!-- Weather Alert -->
<div class="bg-blue-50 border-l-4 border-blue-400 p-4 mb-4 rounded-r-lg" id="weatherAlert">
<div class="flex items-center">
<div class="text-2xl mr-3">üå§Ô∏è</div>
<div>
<h3 class="font-semibold text-blue-800">Weather Update</h3>
<p class="text-blue-700 text-sm" id="weatherInfo"></p>
</div>
<button class="ml-auto text-blue-400 hover:text-blue-600" onclick="dismissAlert('weather')">√ó</button>
</div>
</div>
<!-- Road Block Alert -->
<div class="bg-orange-50 border-l-4 border-orange-400 p-4 mb-4 rounded-r-lg" id="roadAlert">
<div class="flex items-center">
<div class="text-2xl mr-3">üöß</div>
<div>
<h3 class="font-semibold text-orange-800">Road Updates</h3>
<p class="text-orange-700 text-sm" id="roadInfo"></p>
</div>
<button class="ml-auto text-orange-400 hover:text-orange-600" onclick="dismissAlert('road')">√ó</button>
</div>
</div>
<!-- Emergency Alert -->
<div class="bg-red-50 border-l-4 border-red-400 p-4 mb-4 rounded-r-lg" id="emergencyAlert" style="display: none;">
<div class="flex items-center">
<div class="text-2xl mr-3">üö®</div>
<div>
<h3 class="font-semibold text-red-800">Emergency Alert</h3>
<p class="text-red-700 text-sm" id="emergencyInfo"></p>
</div>
<button class="ml-auto text-red-400 hover:text-red-600" onclick="dismissAlert('emergency')">√ó</button>
</div>
</div>
<!-- Tourist Advisory -->
<div class="bg-green-50 border-l-4 border-green-400 p-4 mb-4 rounded-r-lg" id="advisoryAlert" style="display: none;">
<div class="flex items-center">
<div class="text-2xl mr-3">‚ÑπÔ∏è</div>
<div>
<h3 class="font-semibold text-green-800">Tourist Advisory</h3>
<p class="text-green-700 text-sm" id="advisoryInfo"></p>
</div>
<button class="ml-auto text-green-400 hover:text-green-600" onclick="dismissAlert('advisory')">√ó</button>
</div>
</div>
</div>
<div class="mb-6">
<input class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent" id="searchBar" oninput="filterPlaces()" placeholder="Search places, facts, or descriptions..." type="text"/>
</div>
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="placesGrid">
<!-- Places will be populated here -->
</div>
</div>
<!-- Profile Page -->
<div class="page p-6" id="profilePage" style="display: none;">
<div class="max-w-2xl mx-auto">
<h1 class="text-3xl font-bold mb-8">Profile</h1>
<div class="bg-white rounded-xl p-8 shadow-lg" id="loginForm">
<h2 class="text-2xl font-bold mb-6">Login / Register</h2>
<div class="space-y-4">
<input class="w-full px-4 py-3 rounded-lg border" id="loginName" placeholder="Full Name" type="text"/>
<input class="w-full px-4 py-3 rounded-lg border" id="loginPhone" placeholder="Phone Number" type="tel"/>
<input class="w-full px-4 py-3 rounded-lg border" id="loginPassword" placeholder="Password" type="password"/>
<button class="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors" onclick="handleLogin()">
                            Login / Register
                        </button>
</div>
</div>
<div class="bg-white rounded-xl p-8 shadow-lg" id="profileForm" style="display: none;">
<h2 class="text-2xl font-bold mb-6">Your Profile</h2>
<div class="space-y-4">
<input class="w-full px-4 py-3 rounded-lg border" id="profileName" placeholder="Full Name" type="text"/>
<input class="w-full px-4 py-3 rounded-lg border" id="profilePhone" placeholder="Phone Number" readonly="" type="tel"/>
<select class="w-full px-4 py-3 rounded-lg border" id="preferredLanguage">
<option value="en">English</option>
<option value="hi">Hindi</option>
<option value="ne">Nepali</option>
<option value="bn">Bengali</option>
<option value="ta">Tamil</option>
<option value="te">Telugu</option>
<option value="mr">Marathi</option>
<option value="pa">Punjabi</option>
<option value="gu">Gujarati</option>
<option value="ur">Urdu</option>
<option value="es">Spanish</option>
<option value="fr">French</option>
<option value="de">German</option>
<option value="ja">Japanese</option>
</select>
<input class="w-full px-4 py-3 rounded-lg border" id="relative1" placeholder="Relative 1 Phone" type="tel"/>
<input class="w-full px-4 py-3 rounded-lg border" id="relative2" placeholder="Relative 2 Phone" type="tel"/>
<input class="w-full px-4 py-3 rounded-lg border" id="emergency1" placeholder="Emergency Contact 1" type="tel"/>
<input class="w-full px-4 py-3 rounded-lg border" id="emergency2" placeholder="Emergency Contact 2" type="tel"/>
<button class="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors" onclick="saveProfile()">
                            Save Profile
                        </button>
</div>
</div>
</div>
</div>
<!-- Calendar Page -->
<div class="page p-6" id="calendarPage" style="display: none;">
<div class="max-w-6xl mx-auto">
<h1 class="text-3xl font-bold mb-8">Sikkim Festival Calendar</h1>
<!-- Calendar Navigation -->
<div class="bg-white rounded-xl p-6 shadow-lg mb-6">
<div class="flex justify-between items-center mb-4">
<button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors" onclick="changeMonth(-1)">
                            ‚Üê Previous
                        </button>
<h2 class="text-2xl font-bold" id="currentMonthYear"></h2>
<button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors" onclick="changeMonth(1)">
                            Next ‚Üí
                        </button>
</div>
<!-- Calendar Grid -->
<div class="grid grid-cols-7 gap-2 mb-4">
<div class="text-center font-semibold p-2 bg-gray-100 rounded">Sun</div>
<div class="text-center font-semibold p-2 bg-gray-100 rounded">Mon</div>
<div class="text-center font-semibold p-2 bg-gray-100 rounded">Tue</div>
<div class="text-center font-semibold p-2 bg-gray-100 rounded">Wed</div>
<div class="text-center font-semibold p-2 bg-gray-100 rounded">Thu</div>
<div class="text-center font-semibold p-2 bg-gray-100 rounded">Fri</div>
<div class="text-center font-semibold p-2 bg-gray-100 rounded">Sat</div>
</div>
<div class="grid grid-cols-7 gap-2" id="calendarGrid">
<!-- Calendar dates will be populated here -->
</div>
</div>
<!-- Upcoming Events -->
<div class="bg-white rounded-xl p-6 shadow-lg mb-6">
<h2 class="text-2xl font-bold mb-4">üéâ Upcoming Events</h2>
<div class="space-y-4" id="upcomingEvents">
<!-- Upcoming events will be populated here -->
</div>
</div>
<!-- Festival Categories -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
<div class="bg-gradient-to-br from-orange-400 to-red-500 text-white rounded-xl p-6">
<h3 class="text-xl font-bold mb-2">üèîÔ∏è Buddhist Festivals</h3>
<p class="text-sm opacity-90">Sacred celebrations and monastery events</p>
<button class="mt-3 bg-white bg-opacity-20 px-4 py-2 rounded-lg hover:bg-opacity-30 transition-colors" onclick="filterFestivals('buddhist')">
                            View All
                        </button>
</div>
<div class="bg-gradient-to-br from-green-400 to-blue-500 text-white rounded-xl p-6">
<h3 class="text-xl font-bold mb-2">üé≠ Cultural Events</h3>
<p class="text-sm opacity-90">Traditional dances and cultural programs</p>
<button class="mt-3 bg-white bg-opacity-20 px-4 py-2 rounded-lg hover:bg-opacity-30 transition-colors" onclick="filterFestivals('cultural')">
                            View All
                        </button>
</div>
<div class="bg-gradient-to-br from-purple-400 to-pink-500 text-white rounded-xl p-6">
<h3 class="text-xl font-bold mb-2">üå∏ Seasonal Events</h3>
<p class="text-sm opacity-90">Flower festivals and seasonal celebrations</p>
<button class="mt-3 bg-white bg-opacity-20 px-4 py-2 rounded-lg hover:bg-opacity-30 transition-colors" onclick="filterFestivals('seasonal')">
                            View All
                        </button>
</div>
</div>
<!-- All Festivals List -->
<div class="bg-white rounded-xl p-6 shadow-lg">
<div class="flex justify-between items-center mb-4">
<h2 class="text-2xl font-bold">All Festivals &amp; Events</h2>
<div class="flex gap-2">
<button class="bg-gray-200 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors" onclick="filterFestivals('all')">
                                All
                            </button>
<button class="bg-orange-200 px-4 py-2 rounded-lg hover:bg-orange-300 transition-colors" onclick="filterFestivals('buddhist')">
                                Buddhist
                            </button>
<button class="bg-green-200 px-4 py-2 rounded-lg hover:bg-green-300 transition-colors" onclick="filterFestivals('cultural')">
                                Cultural
                            </button>
<button class="bg-purple-200 px-4 py-2 rounded-lg hover:bg-purple-300 transition-colors" onclick="filterFestivals('seasonal')">
                                Seasonal
                            </button>
</div>
</div>
<div class="space-y-4" id="festivalsList">
<!-- Festivals list will be populated here -->
</div>
</div>
</div>
</div>
<!-- Trip Planner Page -->
<div class="page p-6" id="tripPlannerPage" style="display: none;">
<div class="max-w-6xl mx-auto">
<h1 class="text-3xl font-bold mb-8">üó∫Ô∏è AI Trip Planner</h1>
<!-- Trip Planning Form -->
<div class="bg-white rounded-xl p-8 shadow-lg mb-8">
<h2 class="text-2xl font-bold mb-6">Plan Your Perfect Sikkim Trip</h2>
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
<!-- Budget Selection -->
<div>
<label class="block text-sm font-medium mb-2">Budget Range *</label>
<select class="w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-blue-500" id="tripBudget">
<option value="">Select Budget</option>
<option value="budget">Budget (‚Çπ5K-15K)</option>
<option value="mid">Mid-range (‚Çπ15K-35K)</option>
<option value="luxury">Luxury (‚Çπ35K+)</option>
</select>
</div>
<!-- Duration -->
<div>
<label class="block text-sm font-medium mb-2">Trip Duration *</label>
<select class="w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-blue-500" id="tripDuration">
<option value="">Select Duration</option>
<option value="2-3">2-3 days</option>
<option value="4-5">4-5 days</option>
<option value="6-7">6-7 days</option>
<option value="8+">8+ days</option>
</select>
</div>
<!-- Travel Style -->
<div>
<label class="block text-sm font-medium mb-2">Travel Style *</label>
<select class="w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-blue-500" id="tripStyle">
<option value="">Select Style</option>
<option value="adventure">Adventure</option>
<option value="cultural">Cultural</option>
<option value="relaxed">Relaxed</option>
<option value="spiritual">Spiritual</option>
<option value="family">Family-friendly</option>
</select>
</div>
<!-- Group Size -->
<div>
<label class="block text-sm font-medium mb-2">Group Size</label>
<select class="w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-blue-500" id="groupSize">
<option value="">Select Group Size</option>
<option value="solo">Solo</option>
<option value="couple">Couple</option>
<option value="small">Small group (3-5)</option>
<option value="large">Large group (6+)</option>
</select>
</div>
<!-- Season -->
<div>
<label class="block text-sm font-medium mb-2">Preferred Season</label>
<select class="w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-blue-500" id="tripSeason">
<option value="">Any Season</option>
<option value="spring">Spring (Mar-May)</option>
<option value="summer">Summer (Jun-Aug)</option>
<option value="autumn">Autumn (Sep-Nov)</option>
<option value="winter">Winter (Dec-Feb)</option>
</select>
</div>
<!-- Starting Point -->
<div>
<label class="block text-sm font-medium mb-2">Starting Point</label>
<select class="w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-blue-500" id="startingPoint">
<option value="gangtok">Gangtok</option>
<option value="bagdogra">Bagdogra Airport</option>
<option value="njp">NJP Railway Station</option>
<option value="siliguri">Siliguri</option>
</select>
</div>
</div>
<!-- Special Interests -->
<div class="mb-6">
<label class="block text-sm font-medium mb-3">Special Interests (Select all that apply)</label>
<div class="grid grid-cols-2 md:grid-cols-4 gap-3">
<label class="flex items-center">
<input class="mr-2" type="checkbox" value="monasteries"/>
<span class="text-sm">üèõÔ∏è Monasteries</span>
</label>
<label class="flex items-center">
<input class="mr-2" type="checkbox" value="lakes"/>
<span class="text-sm">üèîÔ∏è Lakes</span>
</label>
<label class="flex items-center">
<input class="mr-2" type="checkbox" value="trekking"/>
<span class="text-sm">ü•æ Trekking</span>
</label>
<label class="flex items-center">
<input class="mr-2" type="checkbox" value="photography"/>
<span class="text-sm">üì∏ Photography</span>
</label>
<label class="flex items-center">
<input class="mr-2" type="checkbox" value="food"/>
<span class="text-sm">üçú Food</span>
</label>
<label class="flex items-center">
<input class="mr-2" type="checkbox" value="shopping"/>
<span class="text-sm">üõçÔ∏è Shopping</span>
</label>
<label class="flex items-center">
<input class="mr-2" type="checkbox" value="festivals"/>
<span class="text-sm">üé≠ Festivals</span>
</label>
<label class="flex items-center">
<input class="mr-2" type="checkbox" value="wildlife"/>
<span class="text-sm">üêæ Wildlife</span>
</label>
</div>
</div>
<!-- Additional Requirements -->
<div class="mb-6">
<label class="block text-sm font-medium mb-2">Additional Requirements</label>
<textarea class="w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-blue-500" id="additionalRequirements" placeholder="Any specific requirements, accessibility needs, or preferences..." rows="3"></textarea>
</div>
<!-- Action Buttons -->
<div class="flex gap-4">
<button class="flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors font-semibold" onclick="generateTripPlan()">
                            üöÄ Generate AI Trip Plan
                        </button>
<button class="bg-gray-300 text-gray-700 px-6 py-3 rounded-lg hover:bg-gray-400 transition-colors" onclick="clearTripForm()">
                            Clear Form
                        </button>
</div>
</div>
<!-- Sample Trip Plans -->
<div class="bg-white rounded-xl p-8 shadow-lg mb-8">
<h2 class="text-2xl font-bold mb-6">Popular Trip Templates</h2>
<div class="grid grid-cols-1 md:grid-cols-3 gap-6" id="sampleTripPlans">
<!-- Sample plans will be populated here -->
</div>
</div>
<!-- Generated Trip Plan -->
<div class="bg-white rounded-xl p-8 shadow-lg" id="generatedTripPlan" style="display: none;">
<div class="flex justify-between items-center mb-6">
<h2 class="text-2xl font-bold">Your Personalized Trip Plan</h2>
<div class="flex gap-3">
<button class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors" onclick="editTripPlan()">
                                ‚úèÔ∏è Edit Plan
                            </button>
<button class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors" onclick="downloadTripPlan()">
                                üì• Download
                            </button>
<button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors" onclick="shareTripPlan()">
                                üì§ Share
                            </button>
</div>
</div>
<div id="tripPlanContent">
<!-- Generated trip plan content will appear here -->
</div>
</div>
</div>
</div>
<!-- Settings Page -->
<div class="page p-6" id="settingsPage" style="display: none;">
<div class="max-w-2xl mx-auto">
<h1 class="text-3xl font-bold mb-8">Settings</h1>
<div class="bg-white rounded-xl p-8 shadow-lg space-y-6">
<div>
<h3 class="text-lg font-semibold mb-4">Theme Colors</h3>
<div class="grid grid-cols-2 gap-4">
<div>
<label class="block text-sm font-medium mb-2">Primary Color</label>
<input class="w-full h-12 rounded-lg border" id="primaryColor" type="color" value="#3b82f6"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Background Color</label>
<input class="w-full h-12 rounded-lg border" id="backgroundColor" type="color" value="#f3f4f6"/>
</div>
</div>
</div>
<div>
<h3 class="text-lg font-semibold mb-4">Emergency Numbers</h3>
<div class="space-y-3">
<input class="w-full px-4 py-3 rounded-lg border" id="policeNumber" placeholder="Police Number" type="tel" value="100"/>
<input class="w-full px-4 py-3 rounded-lg border" id="ambulanceNumber" placeholder="Ambulance Number" type="tel" value="108"/>
</div>
</div>
<button class="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors" onclick="saveSettings()">
                        Save Settings
                    </button>
</div>
</div>
</div>
<!-- Developer Options -->
<div class="page p-6" id="developerPage" style="display: none;">
<div class="max-w-6xl mx-auto">
<h1 class="text-3xl font-bold mb-8">Developer Control Panel</h1>
<!-- Developer Tabs -->
<div class="mb-6">
<div class="flex space-x-1 bg-gray-100 p-1 rounded-lg">
<button class="flex-1 py-2 px-4 rounded-md bg-white shadow text-blue-600 font-medium" id="placesTab" onclick="showDevTab('places')">
                            Places Management
                        </button>
<button class="flex-1 py-2 px-4 rounded-md text-gray-600 hover:text-gray-900" id="configTab" onclick="showDevTab('config')">
                            App Configuration
                        </button>
<button class="flex-1 py-2 px-4 rounded-md text-gray-600 hover:text-gray-900" id="alertsTab" onclick="showDevTab('alerts')">
                            Live Data &amp; Alerts
                        </button>
<button class="flex-1 py-2 px-4 rounded-md text-gray-600 hover:text-gray-900" id="analyticsTab" onclick="showDevTab('analytics')">
                            Analytics &amp; Logs
                        </button>
<button class="flex-1 py-2 px-4 rounded-md text-gray-600 hover:text-gray-900" id="tripPlansTab" onclick="showDevTab('tripPlans')">
                            Trip Plans
                        </button>
</div>
</div>
<!-- Places Management Tab -->
<div class="dev-tab bg-white rounded-xl p-8 shadow-lg" id="placesDevTab">
<div class="flex justify-between items-center mb-6">
<h2 class="text-2xl font-bold">Manage Places</h2>
<button class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors" onclick="showAddPlaceForm()">
                            Add New Place
                        </button>
</div>
<div class="space-y-4" id="placesList">
<!-- Places list will be populated here -->
</div>
</div>
<!-- App Configuration Tab -->
<div class="dev-tab bg-white rounded-xl p-8 shadow-lg" id="configDevTab" style="display: none;">
<h2 class="text-2xl font-bold mb-6">App Configuration</h2>
<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
<!-- Basic Settings -->
<div>
<h3 class="text-lg font-semibold mb-4">Basic Settings</h3>
<div class="space-y-4">
<div>
<label class="block text-sm font-medium mb-2">App Name</label>
<input class="w-full px-4 py-2 border rounded-lg" id="configAppName" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Tagline</label>
<input class="w-full px-4 py-2 border rounded-lg" id="configTagline" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Welcome Message</label>
<textarea class="w-full px-4 py-2 border rounded-lg" id="configWelcome" rows="3"></textarea>
</div>
</div>
</div>
<!-- Emergency Numbers -->
<div>
<h3 class="text-lg font-semibold mb-4">Emergency Contacts</h3>
<div class="space-y-4">
<div>
<label class="block text-sm font-medium mb-2">Emergency Helpline</label>
<input class="w-full px-4 py-2 border rounded-lg" id="configEmergencyHelpline" type="tel"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Tourist Helpline</label>
<input class="w-full px-4 py-2 border rounded-lg" id="configTouristHelpline" type="tel"/>
</div>
</div>
</div>
<!-- Feature Toggles -->
<div>
<h3 class="text-lg font-semibold mb-4">Feature Controls</h3>
<div class="space-y-3">
<label class="flex items-center">
<input class="mr-3" id="configWeatherAlerts" type="checkbox"/>
                                    Enable Weather Alerts
                                </label>
<label class="flex items-center">
<input class="mr-3" id="configRoadUpdates" type="checkbox"/>
                                    Enable Road Updates
                                </label>
<label class="flex items-center">
<input class="mr-3" id="configOfflineMode" type="checkbox"/>
                                    Enable Offline Mode
                                </label>
</div>
</div>
<!-- Theme Selection -->
<div>
<h3 class="text-lg font-semibold mb-4">Theme Settings</h3>
<div class="space-y-3">
<label class="flex items-center">
<input class="mr-3" name="theme" type="radio" value="sikkim"/>
                                    Sikkim Theme (Blue/Teal)
                                </label>
<label class="flex items-center">
<input class="mr-3" name="theme" type="radio" value="mountain"/>
                                    Mountain Theme (Purple/Gold)
                                </label>
<label class="flex items-center">
<input class="mr-3" name="theme" type="radio" value="monastery"/>
                                    Monastery Theme (Pink/Cream)
                                </label>
</div>
</div>
</div>
<div class="mt-8 flex gap-4">
<button class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors" onclick="saveAppConfig()">
                            Save Configuration
                        </button>
<button class="bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition-colors" onclick="resetAppConfig()">
                            Reset to Defaults
                        </button>
</div>
</div>
<!-- Live Data & Alerts Tab -->
<div class="dev-tab bg-white rounded-xl p-8 shadow-lg" id="alertsDevTab" style="display: none;">
<h2 class="text-2xl font-bold mb-6">Live Data &amp; Alert Management</h2>
<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
<!-- Weather Data -->
<div>
<h3 class="text-lg font-semibold mb-4">Weather Information</h3>
<div class="space-y-4">
<div>
<label class="block text-sm font-medium mb-2">Current Weather</label>
<input class="w-full px-4 py-2 border rounded-lg" id="currentWeather" placeholder="e.g., Partly cloudy, 15¬∞C" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Weather Alert</label>
<textarea class="w-full px-4 py-2 border rounded-lg" id="weatherAlertText" placeholder="Enter weather warning or advisory" rows="3"></textarea>
</div>
<button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors" onclick="updateWeatherAlert()">
                                    Update Weather Alert
                                </button>
</div>
</div>
<!-- Road Updates -->
<div>
<h3 class="text-lg font-semibold mb-4">Road Conditions</h3>
<div class="space-y-4">
<div>
<label class="block text-sm font-medium mb-2">Road Status</label>
<select class="w-full px-4 py-2 border rounded-lg" id="roadStatus">
<option value="clear">All Roads Clear</option>
<option value="caution">Drive with Caution</option>
<option value="blocked">Road Blocks Present</option>
<option value="closed">Some Roads Closed</option>
</select>
</div>
<div>
<label class="block text-sm font-medium mb-2">Road Alert Details</label>
<textarea class="w-full px-4 py-2 border rounded-lg" id="roadAlertText" placeholder="Describe road conditions, blocks, or closures" rows="3"></textarea>
</div>
<button class="bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 transition-colors" onclick="updateRoadAlert()">
                                    Update Road Alert
                                </button>
</div>
</div>
<!-- Emergency Alerts -->
<div>
<h3 class="text-lg font-semibold mb-4">Emergency Alerts</h3>
<div class="space-y-4">
<div>
<label class="block text-sm font-medium mb-2">Alert Type</label>
<select class="w-full px-4 py-2 border rounded-lg" id="emergencyType">
<option value="">No Emergency</option>
<option value="weather">Severe Weather</option>
<option value="landslide">Landslide Warning</option>
<option value="flood">Flood Alert</option>
<option value="earthquake">Earthquake</option>
<option value="other">Other Emergency</option>
</select>
</div>
<div>
<label class="block text-sm font-medium mb-2">Emergency Message</label>
<textarea class="w-full px-4 py-2 border rounded-lg" id="emergencyAlertText" placeholder="Emergency alert message for tourists" rows="3"></textarea>
</div>
<button class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors" onclick="updateEmergencyAlert()">
                                    Update Emergency Alert
                                </button>
</div>
</div>
<!-- Emergency Broadcast -->
<div>
<h3 class="text-lg font-semibold mb-4">Emergency Broadcast System</h3>
<div class="space-y-4 p-4 bg-red-50 border border-red-200 rounded-lg">
<div class="flex items-center mb-2">
<span class="text-2xl mr-2">üö®</span>
<span class="font-semibold text-red-800">High Priority Alert System</span>
</div>
<div>
<label class="block text-sm font-medium mb-2">Broadcast Type</label>
<select class="w-full px-4 py-2 border rounded-lg" id="broadcastType">
<option value="">No Broadcast</option>
<option value="earthquake">Earthquake Alert</option>
<option value="landslide">Landslide Warning</option>
<option value="flood">Flash Flood Alert</option>
<option value="weather">Severe Weather Warning</option>
<option value="security">Security Alert</option>
<option value="evacuation">Evacuation Notice</option>
<option value="medical">Medical Emergency</option>
<option value="custom">Custom Emergency</option>
</select>
</div>
<div>
<label class="block text-sm font-medium mb-2">Emergency Message</label>
<textarea class="w-full px-4 py-2 border rounded-lg" id="broadcastMessage" placeholder="URGENT: Emergency message for all tourists in the area..." rows="3"></textarea>
</div>
<div class="flex gap-2">
<button class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors font-semibold" onclick="sendEmergencyBroadcast()">
                                        üö® Send Emergency Broadcast
                                    </button>
<button class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors" onclick="clearEmergencyBroadcast()">
                                        Clear Broadcast
                                    </button>
</div>
<p class="text-xs text-red-600">‚ö†Ô∏è Emergency broadcasts will appear prominently on all tourist home screens with sound alerts</p>
</div>
</div>
<!-- Tourist Advisory -->
<div>
<h3 class="text-lg font-semibold mb-4">Tourist Advisory</h3>
<div class="space-y-4">
<div>
<label class="block text-sm font-medium mb-2">Advisory Type</label>
<select class="w-full px-4 py-2 border rounded-lg" id="advisoryType">
<option value="">No Advisory</option>
<option value="permit">Permit Requirements</option>
<option value="festival">Festival Information</option>
<option value="season">Seasonal Advisory</option>
<option value="health">Health &amp; Safety</option>
<option value="transport">Transportation</option>
</select>
</div>
<div>
<label class="block text-sm font-medium mb-2">Advisory Message</label>
<textarea class="w-full px-4 py-2 border rounded-lg" id="advisoryAlertText" placeholder="Tourist advisory or information" rows="3"></textarea>
</div>
<button class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors" onclick="updateAdvisoryAlert()">
                                    Update Advisory
                                </button>
</div>
</div>
</div>
<div class="mt-8 p-4 bg-gray-50 rounded-lg">
<h4 class="font-semibold mb-2">Live Data Integration</h4>
<p class="text-sm text-gray-600 mb-4">Connect to external APIs for real-time data (requires API keys in production)</p>
<div class="flex gap-4">
<button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors" onclick="fetchLiveWeather()">
                                Fetch Live Weather
                            </button>
<button class="bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 transition-colors" onclick="fetchRoadConditions()">
                                Check Road Conditions
                            </button>
<button class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors" onclick="clearAllAlerts()">
                                Clear All Alerts
                            </button>
</div>
</div>
</div>
<!-- Trip Plans Management Tab -->
<div class="dev-tab bg-white rounded-xl p-8 shadow-lg" id="tripPlansDevTab" style="display: none;">
<h2 class="text-2xl font-bold mb-6">Trip Planner Management</h2>
<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
<!-- Budget Recommendations -->
<div>
<h3 class="text-lg font-semibold mb-4">Budget-based Recommendations</h3>
<!-- Budget Tier -->
<div class="mb-6 p-4 bg-green-50 rounded-lg">
<h4 class="font-semibold text-green-800 mb-3">Budget (‚Çπ5K-15K)</h4>
<div class="space-y-3">
<div>
<label class="block text-sm font-medium mb-1">Accommodation</label>
<textarea class="w-full px-3 py-2 border rounded text-sm" id="budgetAccommodation" rows="2">Budget hotels, hostels, homestays
‚Çπ800-1500 per night</textarea>
</div>
<div>
<label class="block text-sm font-medium mb-1">Transport</label>
<textarea class="w-full px-3 py-2 border rounded text-sm" id="budgetTransport" rows="2">Shared taxis, local buses
‚Çπ1500-2500 per day</textarea>
</div>
<div>
<label class="block text-sm font-medium mb-1">Food</label>
<textarea class="w-full px-3 py-2 border rounded text-sm" id="budgetFood" rows="2">Local dhabas, street food
‚Çπ200-400 per meal</textarea>
</div>
</div>
</div>
<!-- Mid-range Tier -->
<div class="mb-6 p-4 bg-blue-50 rounded-lg">
<h4 class="font-semibold text-blue-800 mb-3">Mid-range (‚Çπ15K-35K)</h4>
<div class="space-y-3">
<div>
<label class="block text-sm font-medium mb-1">Accommodation</label>
<textarea class="w-full px-3 py-2 border rounded text-sm" id="midAccommodation" rows="2">3-star hotels, good homestays
‚Çπ2500-4500 per night</textarea>
</div>
<div>
<label class="block text-sm font-medium mb-1">Transport</label>
<textarea class="w-full px-3 py-2 border rounded text-sm" id="midTransport" rows="2">Private taxis, SUVs
‚Çπ3500-5500 per day</textarea>
</div>
<div>
<label class="block text-sm font-medium mb-1">Food</label>
<textarea class="w-full px-3 py-2 border rounded text-sm" id="midFood" rows="2">Hotel restaurants, cafes
‚Çπ500-800 per meal</textarea>
</div>
</div>
</div>
<!-- Luxury Tier -->
<div class="mb-6 p-4 bg-purple-50 rounded-lg">
<h4 class="font-semibold text-purple-800 mb-3">Luxury (‚Çπ35K+)</h4>
<div class="space-y-3">
<div>
<label class="block text-sm font-medium mb-1">Accommodation</label>
<textarea class="w-full px-3 py-2 border rounded text-sm" id="luxuryAccommodation" rows="2">5-star hotels, luxury resorts
‚Çπ8000-15000 per night</textarea>
</div>
<div>
<label class="block text-sm font-medium mb-1">Transport</label>
<textarea class="w-full px-3 py-2 border rounded text-sm" id="luxuryTransport" rows="2">Luxury cars, helicopter transfers
‚Çπ7000-12000 per day</textarea>
</div>
<div>
<label class="block text-sm font-medium mb-1">Food</label>
<textarea class="w-full px-3 py-2 border rounded text-sm" id="luxuryFood" rows="2">Fine dining, premium restaurants
‚Çπ1500-3000 per meal</textarea>
</div>
</div>
</div>
<button class="w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 transition-colors" onclick="saveBudgetRecommendations()">
                                Save Budget Recommendations
                            </button>
</div>
<!-- Location Services -->
<div>
<h3 class="text-lg font-semibold mb-4">Location-based Services</h3>
<div class="space-y-6">
<div class="p-4 bg-gray-50 rounded-lg">
<h4 class="font-semibold mb-3">Gangtok Services</h4>
<textarea class="w-full px-3 py-2 border rounded text-sm" id="gangtokServices" rows="4">Hotels: Hotel Tibet, The Elgin Nor-Khill
Restaurants: Baker's Cafe, Taste of Tibet
Transport: Gangtok Taxi Stand
Emergency: STNM Hospital</textarea>
</div>
<div class="p-4 bg-gray-50 rounded-lg">
<h4 class="font-semibold mb-3">Pelling Services</h4>
<textarea class="w-full px-3 py-2 border rounded text-sm" id="pellingServices" rows="4">Hotels: Hotel Garuda, Pelling Resort
Restaurants: Hotel Garuda Restaurant
Transport: Local taxi services
Attractions: Pemayangtse Monastery</textarea>
</div>
<button class="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors" onclick="saveLocationServices()">
                                    Save Location Services
                                </button>
</div>
<!-- Trip Templates -->
<div class="mt-8">
<h3 class="text-lg font-semibold mb-4">Trip Templates</h3>
<div class="space-y-4">
<div class="p-4 border rounded-lg">
<div class="flex justify-between items-center">
<div>
<h4 class="font-semibold">Budget Explorer Template</h4>
<p class="text-sm text-gray-600">3-day budget-friendly itinerary</p>
</div>
<button class="bg-gray-600 text-white px-3 py-1 rounded text-sm hover:bg-gray-700">
                                                Edit
                                            </button>
</div>
</div>
<div class="p-4 border rounded-lg">
<div class="flex justify-between items-center">
<div>
<h4 class="font-semibold">Cultural Heritage Template</h4>
<p class="text-sm text-gray-600">5-day monastery and culture tour</p>
</div>
<button class="bg-gray-600 text-white px-3 py-1 rounded text-sm hover:bg-gray-700">
                                                Edit
                                            </button>
</div>
</div>
<div class="p-4 border rounded-lg">
<div class="flex justify-between items-center">
<div>
<h4 class="font-semibold">Adventure Seeker Template</h4>
<p class="text-sm text-gray-600">7-day trekking and adventure</p>
</div>
<button class="bg-gray-600 text-white px-3 py-1 rounded text-sm hover:bg-gray-700">
                                                Edit
                                            </button>
</div>
</div>
<button class="w-full bg-purple-600 text-white py-2 rounded-lg hover:bg-purple-700 transition-colors" onclick="addNewTripTemplate()">
                                        + Add New Template
                                    </button>
</div>
</div>
</div>
</div>
</div>
<!-- Analytics & Logs Tab -->
<div class="dev-tab bg-white rounded-xl p-8 shadow-lg" id="analyticsDevTab" style="display: none;">
<h2 class="text-2xl font-bold mb-6">Analytics &amp; System Logs</h2>
<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
<!-- Usage Statistics -->
<div>
<h3 class="text-lg font-semibold mb-4">Usage Statistics</h3>
<div class="space-y-4">
<div class="bg-gray-50 p-4 rounded-lg">
<div class="text-2xl font-bold text-blue-600" id="totalUsers">0</div>
<div class="text-sm text-gray-600">Total Users</div>
</div>
<div class="bg-gray-50 p-4 rounded-lg">
<div class="text-2xl font-bold text-green-600" id="totalPlaces">2</div>
<div class="text-sm text-gray-600">Total Places</div>
</div>
<div class="bg-gray-50 p-4 rounded-lg">
<div class="text-2xl font-bold text-orange-600" id="totalSOS">0</div>
<div class="text-sm text-gray-600">SOS Alerts Sent</div>
</div>
</div>
</div>
<!-- System Logs -->
<div>
<h3 class="text-lg font-semibold mb-4">System Logs</h3>
<div class="bg-gray-900 text-green-400 p-4 rounded-lg h-64 overflow-y-auto font-mono text-sm" id="systemLogs">
<div>[INFO] Tour Buddy initialized successfully</div>
<div>[INFO] 2 places loaded from storage</div>
<div>[INFO] Live data monitoring started</div>
</div>
<div class="mt-4 flex gap-2">
<button class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors" onclick="clearLogs()">
                                    Clear Logs
                                </button>
<button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors" onclick="exportLogs()">
                                    Export Logs
                                </button>
</div>
</div>
<!-- SOS Logs -->
<div class="lg:col-span-2">
<h3 class="text-lg font-semibold mb-4">SOS Emergency Logs</h3>
<div class="space-y-2 max-h-64 overflow-y-auto" id="sosLogsList">
<!-- SOS logs will be populated here -->
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<!-- Explore Modal -->
<div class="modal" id="exploreModal">
<div class="bg-white rounded-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
<div class="sticky top-0 bg-white border-b p-6 flex justify-between items-center">
<h2 class="text-2xl font-bold" id="modalTitle"></h2>
<div class="flex gap-3">
<button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors" onclick="askLewis()">
                        Ask Lewis
                    </button>
<button class="text-gray-500 hover:text-gray-700 text-2xl" onclick="closeModal()">√ó</button>
</div>
</div>
<div class="p-6">
<img alt="" class="w-full h-64 object-cover rounded-lg mb-6" id="modalImage"/>
<p class="text-lg mb-6 leading-relaxed" id="modalDescription"></p>
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6" id="modalFacts">
<!-- Quick facts will be populated here -->
</div>
<div class="mb-6" id="modalGallery">
<h3 class="text-xl font-bold mb-4">Gallery with Stories</h3>
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<!-- Gallery images with stories will be populated here -->
</div>
</div>
<div class="flex flex-wrap gap-3">
<button class="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition-colors" onclick="openFullPage()">
                        Explore Full Page
                    </button>
<button class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors" onclick="startTourMode()">

<button class="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors" onclick="openOfflineMap()">
    üó∫Ô∏è Offline Map
</button>

                        T
<!-- Local Transport Section -->
<div class="mb-6" id="modalTransport">
<h3 class="text-xl font-bold mb-4">üöç Local Transport Info</h3>
<ul class="list-disc pl-6 text-gray-700 space-y-2">
<li><strong>Nearest Bus Stop:</strong> <span id="modalBusStop"></span> (<span id="modalBusTime"></span>)</li>
<li><strong>Nearest Train Station:</strong> <span id="modalTrainStop"></span> (<span id="modalTrainTime"></span>)</li>
</ul>
</div>
<!-- Tour Mode Section inside Explore Modal -->
<div class="mt-6" id="tourModeSection">
<h3 class="text-xl font-bold mb-4">üé• Tour Mode</h3>
<video autoplay="" class="w-full h-64 bg-black rounded-lg" id="tourCameraFeed" playsinline=""></video>
<div class="flex gap-2 mt-4">
<button class="bg-blue-600 text-white px-3 py-3 rounded-lg" id="captureBtn">üì∏ What is this?</button>
<button class="bg-indigo-600 text-white px-3 py-3 rounded-lg" id="voiceAskBtn">üé§ Ask (voice)</button>
<select class="rounded px-2 py-1" id="ttsLang">
<option value="en-US">English (US)</option>
<option value="hi-IN">Hindi (India)</option>
<option value="ne-NP">Nepali</option>
<option value="bn-IN">Bengali</option>
<option value="ta-IN">Tamil</option>
</select>
</div>
</div>

our Mode
                    </button>
<button class="bg-orange-600 text-white px-6 py-3 rounded-lg hover:bg-orange-700 transition-colors" onclick="showLocalShops()">
                        Local Shops
                    </button>
<button class="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors" onclick="sendSOS()">
                        SOS
                    </button>
</div>
</div>
</div>
</div>
<!-- Full Page Modal -->
<div class="modal" id="fullPageModal">
<div class="bg-white w-full h-full overflow-y-auto">
<div class="sticky top-0 bg-white border-b p-6 flex justify-between items-center">
<button class="text-blue-600 hover:text-blue-800" onclick="closeFullPage()">‚Üê Back</button>
<button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors" onclick="downloadPackage()">
                    Download Package
                </button>
</div>
<div class="p-6 max-w-4xl mx-auto">
<img alt="" class="w-full h-80 object-cover rounded-lg mb-6" id="fullPageImage"/>
<h1 class="text-4xl font-bold mb-6" id="fullPageTitle"></h1>
<div class="prose max-w-none" id="fullPageContent">
<!-- Full content will be populated here -->
</div>
</div>
</div>
</div>
<!-- Tour Mode -->
<div class="modal" id="tourMode">
<div class="tour-camera">
<video autoplay="" class="w-full h-full object-cover" id="cameraFeed" playsinline="">
<div class="flex gap-2 mt-4">
<button class="bg-blue-600 text-white px-3 py-3 rounded-lg" id="captureBtn">üì∏ What is this?</button>
<button class="bg-indigo-600 text-white px-3 py-3 rounded-lg" id="voiceAskBtn">üé§ Ask (voice)</button>
<select class="rounded px-2 py-1" id="ttsLang">
<option value="en-US">English (US)</option>
<option value="hi-IN">Hindi (India)</option>
<option value="ne-NP">Nepali</option>
<option value="bn-IN">Bengali</option>
<option value="ta-IN">Tamil</option>
</select>
</div>
</video>
<div class="absolute top-4 left-4 right-4 bg-black bg-opacity-50 text-white p-4 rounded-lg">
<div class="text-lg font-semibold mb-2" id="tourStatus">Tour Mode Active</div>
<div class="text-sm" id="lewisMessage">Lewis: Tour started. I am Lewis, your guide.</div>
</div>
<div class="absolute bottom-4 left-4 right-4 flex gap-2">
<button class="bg-blue-600 text-white px-3 py-3 rounded-lg hover:bg-blue-700 transition-colors" onclick="captureImage()">
                    üì∏ Capture
                </button>
<button class="bg-green-600 text-white px-3 py-3 rounded-lg hover:bg-green-700 transition-colors" id="voiceBtn" onclick="toggleVoiceInteraction()">
                    üé§ Talk
                </button>
<button class="bg-purple-600 text-white px-3 py-3 rounded-lg hover:bg-purple-700 transition-colors" onclick="askLewisInTour()">
                    üí¨ Ask
                </button>
<button class="bg-orange-600 text-white px-3 py-3 rounded-lg hover:bg-orange-700 transition-colors" id="muteBtn" onclick="toggleMute()">
                    üîä Mute
                </button>
<button class="bg-red-600 text-white px-3 py-3 rounded-lg hover:bg-red-700 transition-colors" onclick="stopTour()">
                    ‚èπ Stop
                </button>
</div>
</div>
</div>
<!-- Ask Lewis Modal -->
<div class="modal" id="askLewisModal">
<div class="bg-white rounded-xl max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto">
<div class="sticky top-0 bg-white border-b p-6 flex justify-between items-center">
<h2 class="text-2xl font-bold">Ask Lewis - Your AI Guide</h2>
<button class="text-gray-500 hover:text-gray-700 text-2xl" onclick="closeAskLewis()">√ó</button>
</div>
<div class="p-6">
<div class="space-y-4 mb-6 max-h-60 overflow-y-auto" id="chatHistory">
<div class="p-3 rounded-lg bg-gray-100 mr-8">
<div class="font-semibold text-sm">Lewis</div>
<div>Hello! I'm Lewis, your AI guide to Sikkim. I have extensive offline knowledge about places, culture, food, and travel tips. In online mode, I can also analyze images and provide real-time information. How can I help you today?</div>
</div>
</div>
<div class="flex gap-3">
<textarea class="flex-1 px-4 py-3 rounded-lg border resize-none" id="lewisInput" placeholder="Ask Lewis anything about Sikkim..." rows="3"></textarea>
<div class="flex flex-col gap-2">
<button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors" onclick="sendToLewis()">
                            Send
                        </button>
<button class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors" onclick="startVoiceInput()">
                            üé§
                        </button>
<button class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors" onclick="scanImage()">
                            üì∑
                        </button>
</div>
</div>
<div class="mt-4">
<input accept="image/*" id="imageUpload" onchange="handleImageUpload(event)" style="display: none;" type="file"/>
<div class="hidden mt-4 p-4 border-2 border-dashed border-gray-300 rounded-lg" id="imagePreview">
<img alt="Uploaded image" class="max-w-full h-48 object-contain mx-auto mb-3" id="uploadedImage"/>
<div class="text-center">
<button class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors" onclick="analyzeImage()">
                                üîç Analyze Image
                            </button>
<button class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors ml-2" onclick="clearImage()">
                                Clear
                            </button>
</div>
</div>
</div>
<div class="mt-4 flex justify-between items-center">
<div class="flex gap-2">
<label class="flex items-center">
<input checked="" class="mr-2" name="lewisMode" type="radio" value="offline"/>
<span class="text-sm">Offline (500+ FAQs)</span>
</label>
<label class="flex items-center">
<input class="mr-2" name="lewisMode" type="radio" value="online"/>
<span class="text-sm">Online (AI + Image Scan)</span>
</label>
</div>
<div class="text-xs text-gray-500">
<span id="lewisStatus">Offline Mode Active</span>
</div>
</div>
</div>
</div>
</div>
<!-- SOS Modal -->
<div class="modal" id="sosModal">
<div class="bg-white rounded-xl max-w-md w-full mx-4">
<div class="p-6 text-center">
<div class="text-6xl mb-4">üö®</div>
<h2 class="text-2xl font-bold text-red-600 mb-4">Emergency SOS</h2>
<p class="text-gray-600 mb-6">This will send your location and emergency message to all your emergency contacts.</p>
<div class="flex gap-3">
<button class="flex-1 bg-red-600 text-white py-3 rounded-lg hover:bg-red-700 transition-colors" onclick="confirmSOS()">
                        Send SOS
                    </button>
<button class="flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg hover:bg-gray-400 transition-colors" onclick="closeSOS()">
                        Cancel
                    </button>
</div>
</div>
</div>
</div>
<!-- Developer Login Modal -->
<div class="modal" id="developerLoginModal">
<div class="bg-white rounded-xl max-w-md w-full mx-4">
<div class="p-6">
<h2 class="text-2xl font-bold mb-4">Developer Access</h2>
<input class="w-full px-4 py-3 rounded-lg border mb-4" id="developerPassword" placeholder="Enter password" type="password"/>
<div class="flex gap-3">
<button class="flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors" onclick="verifyDeveloperPassword()">
                        Access
                    </button>
<button class="flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg hover:bg-gray-400 transition-colors" onclick="closeDeveloperLogin()">
                        Cancel
                    </button>
</div>
</div>
</div>
</div>
<!-- Add Place Modal -->
<div class="modal" id="addPlaceModal">
<div class="bg-white rounded-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
<div class="sticky top-0 bg-white border-b p-6 flex justify-between items-center">
<h2 class="text-2xl font-bold">Add New Place</h2>
<button class="text-gray-500 hover:text-gray-700 text-2xl" onclick="closeAddPlace()">√ó</button>
</div>
<form class="p-6 space-y-6" id="addPlaceForm">
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div>
<label class="block text-sm font-medium mb-2">Place Name *</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceName" required="" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Slug (URL-friendly name)</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceSlug" placeholder="auto-generated" type="text"/>
</div>
</div>
<div>
<label class="block text-sm font-medium mb-2">Short Description *</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceShortDesc" placeholder="Brief description for the card" required="" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Long Description *</label>
<textarea class="w-full px-4 py-2 border rounded-lg" id="newPlaceLongDesc" placeholder="Detailed description for the modal" required="" rows="4"></textarea>
</div>
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div>
<label class="block text-sm font-medium mb-2">Nearest Bus Stop</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceBusStop" placeholder="e.g., Gangtok Bus Stand" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Bus Timings</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceBusTime" placeholder="e.g., 6:00 AM ‚Äì 8:00 PM" type="text"/>
</div>
</div>
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div>
<label class="block text-sm font-medium mb-2">Nearest Train Station</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceTrainStop" placeholder="e.g., NJP Railway Station" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Train Timings</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceTrainTime" placeholder="e.g., 5:30 AM ‚Äì 10:30 PM" type="text"/>
</div>
</div>
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div>
<label class="block text-sm font-medium mb-2">Nearest Bus Stop</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceBusStop" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Bus Timings</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceBusTime" type="text"/>
</div>
</div>
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div>
<label class="block text-sm font-medium mb-2">Nearest Train Station</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceTrainStop" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Train Timings</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceTrainTime" type="text"/>
</div>
</div>
<div>
<label class="block text-sm font-medium mb-2">Altitude</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceAltitude" placeholder="e.g., 12,313 feet" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Type</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceType" placeholder="e.g., Glacial Lake, Monastery" type="text"/>
</div>
</div>
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div>
<label class="block text-sm font-medium mb-2">Best Time to Visit</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceBestTime" placeholder="e.g., March to June" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Distance from Gangtok</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceDistance" placeholder="e.g., 40 km" type="text"/>
</div>
</div>
<div>
<label class="block text-sm font-medium mb-2">Cover Image</label>
<div class="space-y-3">
<input accept="image/*" class="w-full px-4 py-2 border rounded-lg" id="newPlaceCoverImageFile" type="file"/>
<div class="mt-2" id="newCoverPreview" style="display: none;">
<img alt="Cover preview" class="w-32 h-24 object-cover rounded border" id="newCoverPreviewImg"/>
</div>
<p class="text-xs text-gray-500">Upload an image or leave empty to use default placeholder</p>
</div>
</div>
<div>
<label class="block text-sm font-medium mb-2">Narration (English)</label>
<textarea class="w-full px-4 py-2 border rounded-lg" id="newPlaceNarration" placeholder="Welcome message for audio narration" rows="2"></textarea>
</div>
<div>
<label class="block text-sm font-medium mb-2">Gallery Images with Stories</label>
<div class="space-y-4">
<div class="border-2 border-dashed border-gray-300 rounded-lg p-4">
<input accept="image/*" class="w-full px-4 py-2 border rounded-lg" id="newGalleryFiles" multiple="" type="file"/>
<div class="text-sm text-gray-500 mt-2">Select multiple images for the gallery (optional)</div>
</div>
<div class="space-y-4" id="newGalleryPreview" style="display: none;">
<!-- Gallery previews with story inputs will appear here -->
</div>
</div>
</div>
<div>
<label class="block text-sm font-medium mb-2">Local Shops (one per line)</label>
<textarea class="w-full px-4 py-2 border rounded-lg" id="newPlaceShops" placeholder="Shop Name | Type | Phone
Mountain Cafe | Restaurant | +91-9876543210" rows="3"></textarea>
</div>
<div class="flex gap-4">
<button class="flex-1 bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors" onclick="saveNewPlace()" type="button">
                        Add Place
                    </button>
<button class="flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg hover:bg-gray-400 transition-colors" onclick="closeAddPlace()" type="button">
                        Cancel
                    </button>
</div>
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div>
<label class="block text-sm font-medium mb-2">Latitude</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceLat" placeholder="e.g., 27.3314" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Longitude</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceLon" placeholder="e.g., 88.6138" type="text"/>
</div>
</div>
</form>
</div>
</div>
<!-- Edit Place Modal -->
<div class="modal" id="editPlaceModal">
<div class="bg-white rounded-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
<div class="sticky top-0 bg-white border-b p-6 flex justify-between items-center">
<h2 class="text-2xl font-bold">Edit Place</h2>
<button class="text-gray-500 hover:text-gray-700 text-2xl" onclick="closeEditPlace()">√ó</button>
</div>
<form class="p-6 space-y-6" id="editPlaceForm">
<input id="editPlaceId" type="hidden"/>
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div>
<label class="block text-sm font-medium mb-2">Place Name *</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceName" required="" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Slug (URL-friendly name)</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceSlug" type="text"/>
</div>
</div>
<div>
<label class="block text-sm font-medium mb-2">Short Description *</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceShortDesc" required="" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Long Description *</label>
<textarea class="w-full px-4 py-2 border rounded-lg" id="editPlaceLongDesc" required="" rows="4"></textarea>
</div>
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div>
<label class="block text-sm font-medium mb-2">Nearest Bus Stop</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceBusStop" placeholder="e.g., Gangtok Bus Stand" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Bus Timings</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceBusTime" placeholder="e.g., 6:00 AM ‚Äì 8:00 PM" type="text"/>
</div>
</div>
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div>
<label class="block text-sm font-medium mb-2">Nearest Train Station</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceTrainStop" placeholder="e.g., NJP Railway Station" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Train Timings</label>
<input class="w-full px-4 py-2 border rounded-lg" id="newPlaceTrainTime" placeholder="e.g., 5:30 AM ‚Äì 10:30 PM" type="text"/>
</div>
</div>
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div>
<label class="block text-sm font-medium mb-2">Nearest Bus Stop</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceBusStop" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Bus Timings</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceBusTime" type="text"/>
</div>
</div>
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div>
<label class="block text-sm font-medium mb-2">Nearest Train Station</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceTrainStop" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Train Timings</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceTrainTime" type="text"/>
</div>
</div>
<div>
<label class="block text-sm font-medium mb-2">Altitude</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceAltitude" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Type</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceType" type="text"/>
</div>
</div>
<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
<div>
<label class="block text-sm font-medium mb-2">Best Time to Visit</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceBestTime" type="text"/>
</div>
<div>
<label class="block text-sm font-medium mb-2">Distance from Gangtok</label>
<input class="w-full px-4 py-2 border rounded-lg" id="editPlaceDistance" type="text"/>
</div>
</div>
<div>
<label class="block text-sm font-medium mb-2">Cover Image</label>
<div class="space-y-3">
<input accept="image/*" class="w-full px-4 py-2 border rounded-lg" id="editPlaceCoverImageFile" type="file"/>
<div class="mt-2" id="editCoverPreview" style="display: none;">
<img alt="Cover preview" class="w-32 h-24 object-cover rounded border" id="editCoverPreviewImg"/>
</div>
<p class="text-xs text-gray-500">Upload a new image to replace the current cover image</p>
</div>
</div>
<div>
<label class="block text-sm font-medium mb-2">Narration (English)</label>
<textarea class="w-full px-4 py-2 border rounded-lg" id="editPlaceNarration" rows="2"></textarea>
</div>
<div>
<label class="block text-sm font-medium mb-2">Gallery Images with Stories</label>
<div class="space-y-4">
<div class="border-2 border-dashed border-gray-300 rounded-lg p-4">
<input accept="image/*" class="w-full px-4 py-2 border rounded-lg" id="editGalleryFiles" multiple="" type="file"/>
<div class="text-sm text-gray-500 mt-2">Select multiple images for the gallery</div>
</div>
<div class="space-y-4" id="editGalleryPreview" style="display: none;">
<!-- Gallery previews with story inputs will appear here -->
</div>
<div class="space-y-4" id="editExistingGallery">
<div class="text-sm font-medium">Current Gallery Images with Stories:</div>
<div class="space-y-4" id="editCurrentGallery">
<!-- Current gallery images with editable stories will appear here -->
</div>
</div>
</div>
</div>
<div>
<label class="block text-sm font-medium mb-2">Local Shops (one per line)</label>
<textarea class="w-full px-4 py-2 border rounded-lg" id="editPlaceShops" placeholder="Shop Name | Type | Phone" rows="3"></textarea>
</div>
<div class="flex gap-4">
<button class="flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors" onclick="saveEditPlace()" type="button">
                        Save Changes
                    </button>
<button class="flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg hover:bg-gray-400 transition-colors" onclick="closeEditPlace()" type="button">
                        Cancel
                    </button>
</div>
</form>
</div>
</div>
<!-- Image Story Modal -->
<div class="modal" id="imageStoryModal">
<div class="bg-white rounded-xl max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto">
<div class="sticky top-0 bg-white border-b p-6 flex justify-between items-center">
<h2 class="text-2xl font-bold" id="storyModalTitle">Image Story</h2>
<button class="text-gray-500 hover:text-gray-700 text-2xl" onclick="closeImageStory()">√ó</button>
</div>
<div class="p-6">
<img alt="" class="w-full h-64 object-cover rounded-lg mb-4" id="storyModalImage"/>
<div class="text-lg leading-relaxed text-gray-700 italic" id="storyModalContent">
<!-- Story content will be populated here -->
</div>
<div class="mt-6 flex gap-3">
<button class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors" onclick="readStoryAloud()">
                        üîä Read Aloud
                    </button>
<button class="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-400 transition-colors" onclick="closeImageStory()">
                        Close
                    </button>
</div>
</div>
</div>
</div>
<!-- Floating SOS Button -->
<button class="floating-sos" onclick="triggerSOS()" title="Emergency SOS">
        üö®
    </button>
<!-- Footer -->
<footer class="md:ml-64 bg-gray-800 text-white p-4 text-center">
<p class="text-sm">Use HTTPS or localhost for camera &amp; location access.</p>
</footer>
<script>
const OPENAI_API_KEY = "YOUR_API_KEY_HERE";

        // Global App State
        const APP = {
            currentUser: null,
            currentPlace: null,
            liveData: {
                weather: null,
                roadBlocks: [],
                lastUpdated: null
            },
            appConfig: {
                appName: "Tour Buddy",
                tagline: "Your Smart Heritage Guide to Sikkim",
                welcomeMessage: "Discover the mystical beauty of the Himalayas",
                emergencyHelpline: "1091",
                touristHelpline: "1363",
                enableWeatherAlerts: true,
                enableRoadUpdates: true,
                enableOfflineMode: true,
                maxOfflineStorage: "50MB",
                autoUpdateInterval: 300000, // 5 minutes
                languages: ["en", "hi", "ne", "bn", "ta", "te", "mr", "pa", "gu", "ur", "es", "fr", "de", "ja"],
                themes: {
                    sikkim: { primary: "#4facfe", secondary: "#00f2fe", accent: "#ff6b6b" },
                    mountain: { primary: "#667eea", secondary: "#764ba2", accent: "#feca57" },
                    monastery: { primary: "#ff9a9e", secondary: "#fecfef", accent: "#ffecd2" }
                }
            },
            notifications: [],
            places: [
                {
                    id: 1,
                    name: "Tsomgo Lake",
                    slug: "tsomgo-lake",
                    shortDescription: "Sacred glacial lake at 12,313 feet altitude",
                    longDescription: "Tsomgo Lake, also known as Changu Lake, is a glacial lake located in the East Sikkim district. The lake is considered sacred by the local people and is surrounded by steep mountains covered with snow for most of the year. The lake surface reflects different colors with change of seasons and is home to the Brahminy ducks and many migratory birds.",
                    coverImage: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 400 300'%3E%3Cdefs%3E%3ClinearGradient id='lake' x1='0%25' y1='0%25' x2='100%25' y2='100%25'%3E%3Cstop offset='0%25' style='stop-color:%234facfe'/%3E%3Cstop offset='100%25' style='stop-color:%2300f2fe'/%3E%3C/linearGradient%3E%3C/defs%3E%3Crect width='400' height='300' fill='%2387CEEB'/%3E%3Cpath d='M0 200 Q100 180 200 190 T400 200 L400 300 L0 300 Z' fill='url(%23lake)'/%3E%3Cpath d='M50 150 L100 120 L150 140 L200 110 L250 130 L300 100 L350 120 L400 90 L400 0 L0 0 Z' fill='%23228B22'/%3E%3Ccircle cx='350' cy='50' r='30' fill='%23FFD700'/%3E%3C/svg%3E",
                    quickFacts: {
                        "Altitude": "12,313 feet",
                        "Type": "Glacial Lake",
                        "Best Time": "March to June",
                        "Distance from Gangtok": "40 km"
                    },
                    gallery: [
                        { 
                            image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%234facfe'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='14'%3ELake View%3C/text%3E%3C/svg%3E", 
                            label: "Sacred Lake View",
                            story: "As dawn breaks over the sacred waters, Tsomgo Lake mirrors the sky like a perfect jewel. Local legends say the lake changes colors with the seasons, reflecting the moods of the mountain spirits who guard this pristine sanctuary. Pilgrims believe that gazing into these waters at sunrise brings inner peace and clarity."
                        },
                        { 
                            image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%23228B22'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='14'%3EMountains%3C/text%3E%3C/svg%3E", 
                            label: "Guardian Peaks",
                            story: "Towering peaks stand as silent sentinels around the lake, their snow-capped summits touching the clouds. These ancient guardians have watched over pilgrims and travelers for centuries, whispering tales of courage and devotion through the mountain winds that carry prayers to the heavens."
                        },
                        { 
                            image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%23FF6B6B'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='14'%3EPrayer Flags%3C/text%3E%3C/svg%3E", 
                            label: "Prayer Flags Dancing",
                            story: "Colorful prayer flags flutter in the crisp mountain breeze, each one carrying the hopes and dreams of countless visitors. These sacred banners, blessed by monks, are believed to spread compassion and peace with every flutter, creating a bridge between the earthly and divine realms."
                        },
                        { 
                            image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%23FFD93D'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='14'%3EWinter Magic%3C/text%3E%3C/svg%3E", 
                            label: "Frozen Serenity",
                            story: "In winter's embrace, the lake transforms into a crystalline mirror, frozen in time and beauty. The silence here is profound, broken only by the gentle whisper of snow falling on ice. Local shamans say this is when the lake dreams, storing the memories of all who have gazed upon its frozen surface."
                        },
                        { 
                            image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%239B59B6'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='14'%3ETwilight%3C/text%3E%3C/svg%3E", 
                            label: "Mystical Twilight",
                            story: "As evening descends, the lake becomes a canvas painted with hues of purple and gold. This magical hour, when day meets night, is considered the most auspicious time for meditation and reflection. The stillness of the water mirrors the tranquility that fills every visitor's heart at this sacred moment."
                        }
                    ],
                    narrations: {
                        en: "Welcome to Tsomgo Lake, one of Sikkim's most sacred and beautiful destinations.",
                        hi: "‡§§‡•ç‡§∏‡•ã‡§Æ‡§ó‡•ã ‡§ù‡•Ä‡§≤ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à, ‡§∏‡§ø‡§ï‡•ç‡§ï‡§ø‡§Æ ‡§ï‡•á ‡§∏‡§¨‡§∏‡•á ‡§™‡§µ‡§ø‡§§‡•ç‡§∞ ‡§î‡§∞ ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§∏‡•ç‡§•‡§≤‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§è‡§ï‡•§",
                        ne: "‡§§‡•ç‡§∏‡•ã‡§Æ‡•ç‡§ó‡•ã ‡§§‡§æ‡§≤‡§Æ‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§õ, ‡§∏‡§ø‡§ï‡•ç‡§ï‡§ø‡§Æ‡§ï‡§æ ‡§∏‡§¨‡•à‡§≠‡§®‡•ç‡§¶‡§æ ‡§™‡§µ‡§ø‡§§‡•ç‡§∞ ‡§∞ ‡§∏‡•Å‡§®‡•ç‡§¶‡§∞ ‡§ó‡§®‡•ç‡§§‡§µ‡•ç‡§Ø‡§π‡§∞‡•Ç ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§è‡§ï‡•§"
                    },
                    shops: [
                        { name: "Mountain View Cafe", type: "Restaurant", contact: "+91-9876543210" },
                        { name: "Souvenir Shop", type: "Gifts", contact: "+91-9876543211" }
                    ],
                    qna: [
                        { question: "What is the best time to visit?", answer: "March to June is the best time when the lake is not frozen." },
                        { question: "How to reach Tsomgo Lake?", answer: "You need a permit and can hire a taxi from Gangtok. It's about 40km from the city." }
                    ]
                },
                {
                    id: 2,
                    name: "Rumtek Monastery",
                    slug: "rumtek-monastery",
                    shortDescription: "Largest monastery in Sikkim, seat of Karmapa",
                    longDescription: "Rumtek Monastery, also called the Dharmachakra Centre, is a gompa located in the Indian state of Sikkim near the capital Gangtok. It is the largest monastery in Sikkim and is the seat-in-exile of the Gyalwang Karmapa, inaugurated in 1966 by the 16th Karmapa. The monastery is built in the traditional Tibetan architectural style.",
                    coverImage: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 400 300'%3E%3Crect width='400' height='300' fill='%23FFD700'/%3E%3Crect x='100' y='100' width='200' height='150' fill='%238B4513'/%3E%3Crect x='150' y='50' width='100' height='100' fill='%23DC143C'/%3E%3Crect x='175' y='25' width='50' height='50' fill='%23FFD700'/%3E%3Ctext x='200' y='200' text-anchor='middle' fill='white' font-size='16'%3EMonastery%3C/text%3E%3C/svg%3E",
                    quickFacts: {
                        "Built": "1966",
                        "Style": "Tibetan Architecture",
                        "Distance from Gangtok": "24 km",
                        "Significance": "Seat of Karmapa"
                    },
                    gallery: [
                        { 
                            image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%23DC143C'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='12'%3EMain Hall%3C/text%3E%3C/svg%3E", 
                            label: "Sacred Prayer Hall",
                            story: "Inside the sacred hall, butter lamps flicker like stars in the darkness, casting dancing shadows on ancient murals that tell stories of enlightenment. Monks in maroon robes chant ancient prayers, their voices echoing through ornate pillars carved with intricate Buddhist symbols. The air is thick with incense and centuries of devotion, creating an atmosphere where time seems to stand still."
                        },
                        { 
                            image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%23FFD700'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='black' font-size='12'%3EGolden Stupa%3C/text%3E%3C/svg%3E", 
                            label: "Golden Stupa of Wisdom",
                            story: "The golden stupa gleams in the mountain sunlight, its precious metals reflecting the hopes and prayers of countless pilgrims who have journeyed here seeking spiritual guidance. Each prayer flag fluttering nearby carries wishes to the heavens above, while the stupa itself stands as a symbol of the Buddha's enlightened mind, radiating peace across the valley."
                        },
                        { 
                            image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%23800080'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='12'%3EMonk Quarters%3C/text%3E%3C/svg%3E", 
                            label: "Monastic Quarters",
                            story: "The simple yet elegant living quarters of the monks reflect the Buddhist principle of mindful simplicity. Here, young novices learn ancient texts while senior monks meditate in peaceful solitude. The wooden floors, worn smooth by generations of bare feet, echo with the gentle sounds of daily prayers and the rustling of prayer beads."
                        },
                        { 
                            image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%23FF4500'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='12'%3ECeremony%3C/text%3E%3C/svg%3E", 
                            label: "Sacred Ceremonies",
                            story: "During special ceremonies, the monastery comes alive with the deep resonance of long horns and the rhythmic beating of drums. Masked dancers perform ancient rituals that have been passed down through centuries, their movements telling stories of good triumphing over evil, while the community gathers in reverent silence, witnessing traditions that connect them to their spiritual heritage."
                        },
                        { 
                            image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%2332CD32'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='12'%3EGarden%3C/text%3E%3C/svg%3E", 
                            label: "Meditation Garden",
                            story: "The monastery's peaceful garden serves as an outdoor sanctuary where monks and visitors alike find solace among blooming flowers and ancient trees. Stone benches placed strategically throughout offer perfect spots for contemplation, while the gentle sound of wind chimes mingles with birdsong, creating a natural symphony that soothes the soul and prepares the mind for deeper spiritual practice."
                        }
                    ],
                    narrations: {
                        en: "Welcome to Rumtek Monastery, the largest monastery in Sikkim and seat of the Karmapa.",
                        hi: "‡§∞‡•Å‡§Æ‡§ü‡•á‡§ï ‡§Æ‡§† ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à, ‡§∏‡§ø‡§ï‡•ç‡§ï‡§ø‡§Æ ‡§ï‡§æ ‡§∏‡§¨‡§∏‡•á ‡§¨‡§°‡§º‡§æ ‡§Æ‡§† ‡§î‡§∞ ‡§ï‡§∞‡•ç‡§Æ‡§æ‡§™‡§æ ‡§ï‡•Ä ‡§ó‡§¶‡•ç‡§¶‡•Ä‡•§",
                        ne: "‡§∞‡•Å‡§Æ‡•ç‡§ü‡•á‡§ï ‡§ó‡•Å‡§Æ‡•ç‡§¨‡§æ‡§Æ‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§õ, ‡§∏‡§ø‡§ï‡•ç‡§ï‡§ø‡§Æ‡§ï‡•ã ‡§∏‡§¨‡•à‡§≠‡§®‡•ç‡§¶‡§æ ‡§†‡•Ç‡§≤‡•ã ‡§ó‡•Å‡§Æ‡•ç‡§¨‡§æ ‡§∞ ‡§ï‡§∞‡•ç‡§Æ‡§æ‡§™‡§æ‡§ï‡•ã ‡§Ü‡§∏‡§®‡•§"
                    },
                    shops: [
                        { name: "Buddhist Books Store", type: "Books", contact: "+91-9876543212" },
                        { name: "Prayer Items Shop", type: "Religious Items", contact: "+91-9876543213" }
                    ],
                    qna: [
                        { question: "What are the visiting hours?", answer: "The monastery is open from 6 AM to 6 PM daily." },
                        { question: "Is photography allowed?", answer: "Photography is allowed in the courtyard but not inside the main prayer hall." }
                    ]
                }
            ],
            settings: {
                primaryColor: "#3b82f6",
                backgroundColor: "#f3f4f6",
                policeNumber: "100",
                ambulanceNumber: "108"
            },
            sosLogs: [],
            isLoggedIn: false,
            isTourActive: false,
            isListening: false,
            isMuted: false,
            tourData: null,
            recognition: null,
            synthesis: window.speechSynthesis,
            currentCalendarDate: new Date(),
            tripPlanner: {
                budgetRecommendations: {
                    budget: {
                        accommodation: "Budget hotels, hostels, homestays\n‚Çπ800-1500 per night",
                        transport: "Shared taxis, local buses\n‚Çπ1500-2500 per day",
                        food: "Local dhabas, street food\n‚Çπ200-400 per meal"
                    },
                    mid: {
                        accommodation: "3-star hotels, good homestays\n‚Çπ2500-4500 per night",
                        transport: "Private taxis, SUVs\n‚Çπ3500-5500 per day",
                        food: "Hotel restaurants, cafes\n‚Çπ500-800 per meal"
                    },
                    luxury: {
                        accommodation: "5-star hotels, luxury resorts\n‚Çπ8000-15000 per night",
                        transport: "Luxury cars, helicopter transfers\n‚Çπ7000-12000 per day",
                        food: "Fine dining, premium restaurants\n‚Çπ1500-3000 per meal"
                    }
                },
                locationServices: {
                    gangtok: "Hotels: Hotel Tibet, The Elgin Nor-Khill\nRestaurants: Baker's Cafe, Taste of Tibet\nTransport: Gangtok Taxi Stand\nEmergency: STNM Hospital",
                    pelling: "Hotels: Hotel Garuda, Pelling Resort\nRestaurants: Hotel Garuda Restaurant\nTransport: Local taxi services\nAttractions: Pemayangtse Monastery"
                }
            },
            festivals: [
                // Buddhist Festivals
                {
                    id: 1,
                    name: "Losar (Tibetan New Year)",
                    category: "buddhist",
                    date: "2024-02-10",
                    endDate: "2024-02-12",
                    description: "The most important festival for Tibetan Buddhists, marking the beginning of the Tibetan calendar year.",
                    location: "All monasteries across Sikkim",
                    significance: "Celebrates new beginnings, family reunions, and spiritual renewal",
                    activities: ["Monastery prayers", "Traditional dances", "Family feasts", "Gift exchanges"],
                    emoji: "üéä"
                },
                {
                    id: 2,
                    name: "Buddha Jayanti",
                    category: "buddhist",
                    date: "2024-05-23",
                    description: "Celebrates the birth, enlightenment, and death of Lord Buddha.",
                    location: "Rumtek Monastery, Pemayangtse Monastery",
                    significance: "Most sacred day for Buddhists worldwide",
                    activities: ["Special prayers", "Meditation sessions", "Processions", "Charitable activities"],
                    emoji: "üßò"
                },
                {
                    id: 3,
                    name: "Saga Dawa",
                    category: "buddhist",
                    date: "2024-06-22",
                    description: "Sacred month commemorating Buddha's birth, enlightenment, and parinirvana.",
                    location: "All Buddhist monasteries",
                    significance: "Merit accumulated during this month is multiplied",
                    activities: ["Circumambulation", "Prayer flag hoisting", "Charitable deeds", "Meditation"],
                    emoji: "üôè"
                },
                {
                    id: 4,
                    name: "Drukpa Kunley Festival",
                    category: "buddhist",
                    date: "2024-09-15",
                    description: "Celebrates the divine madman saint Drukpa Kunley.",
                    location: "Druk Sangag Choeling Monastery",
                    significance: "Honors unconventional wisdom and spiritual freedom",
                    activities: ["Mask dances", "Religious teachings", "Community feasts"],
                    emoji: "üé≠"
                },
                
                // Cultural Events
                {
                    id: 5,
                    name: "Dashain",
                    category: "cultural",
                    date: "2024-10-10",
                    endDate: "2024-10-19",
                    description: "Major Hindu festival celebrating the victory of good over evil.",
                    location: "Throughout Sikkim",
                    significance: "Most important festival for Nepali community",
                    activities: ["Durga Puja", "Family gatherings", "Traditional foods", "Cultural programs"],
                    emoji: "üèÆ"
                },
                {
                    id: 6,
                    name: "Tihar (Festival of Lights)",
                    category: "cultural",
                    date: "2024-11-01",
                    endDate: "2024-11-05",
                    description: "Five-day festival honoring different animals and relationships.",
                    location: "All Nepali communities",
                    significance: "Celebrates the bond between humans, animals, and nature",
                    activities: ["Deusi-Bhailo songs", "Rangoli decorations", "Oil lamps", "Gai Tihar"],
                    emoji: "ü™î"
                },
                {
                    id: 7,
                    name: "Sikkim State Day",
                    category: "cultural",
                    date: "2024-05-16",
                    description: "Commemorates Sikkim's merger with India in 1975.",
                    location: "Gangtok and all districts",
                    significance: "Celebrates Sikkim's integration into Indian Union",
                    activities: ["Cultural programs", "Parades", "Traditional performances", "Food festivals"],
                    emoji: "üáÆüá≥"
                },
                {
                    id: 8,
                    name: "Maghe Sankranti",
                    category: "cultural",
                    date: "2024-01-15",
                    description: "Marks the end of winter and beginning of longer days.",
                    location: "Throughout Sikkim",
                    significance: "Celebrates the sun's northward journey",
                    activities: ["Holy baths", "Sesame sweets", "Kite flying", "Community feasts"],
                    emoji: "‚òÄÔ∏è"
                },
                
                // Seasonal Events
                {
                    id: 9,
                    name: "Rhododendron Festival",
                    category: "seasonal",
                    date: "2024-04-15",
                    endDate: "2024-04-30",
                    description: "Celebrates Sikkim's state flower in full bloom.",
                    location: "Yumthang Valley, Barsey Rhododendron Sanctuary",
                    significance: "Showcases biodiversity and natural beauty",
                    activities: ["Nature walks", "Photography tours", "Botanical exhibitions", "Eco-tourism"],
                    emoji: "üå∫"
                },
                {
                    id: 10,
                    name: "Orchid Festival",
                    category: "seasonal",
                    date: "2024-03-20",
                    endDate: "2024-03-25",
                    description: "Displays Sikkim's rich variety of orchid species.",
                    location: "Gangtok, Flower Exhibition Centre",
                    significance: "Promotes conservation of rare orchid species",
                    activities: ["Orchid displays", "Gardening workshops", "Cultural shows", "Local crafts"],
                    emoji: "üå∏"
                },
                {
                    id: 11,
                    name: "Red Panda Festival",
                    category: "seasonal",
                    date: "2024-09-21",
                    description: "Raises awareness about Sikkim's state animal.",
                    location: "Padmaja Naidu Himalayan Zoological Park",
                    significance: "Conservation awareness for endangered red pandas",
                    activities: ["Wildlife exhibitions", "Conservation talks", "Nature documentaries", "Eco-activities"],
                    emoji: "üêæ"
                },
                {
                    id: 12,
                    name: "Winter Carnival",
                    category: "seasonal",
                    date: "2024-12-25",
                    endDate: "2024-12-31",
                    description: "Celebrates winter season with cultural programs.",
                    location: "Gangtok, MG Marg",
                    significance: "Promotes winter tourism in Sikkim",
                    activities: ["Cultural performances", "Food stalls", "Handicraft exhibitions", "Music concerts"],
                    emoji: "‚ùÑÔ∏è"
                },
                
                // Additional festivals for 2024
                {
                    id: 13,
                    name: "Pang Lhabsol",
                    category: "buddhist",
                    date: "2024-08-28",
                    description: "Worships Mount Kanchenjunga as the guardian deity of Sikkim.",
                    location: "Tsuk La Khang Palace, Gangtok",
                    significance: "Unique to Sikkim, honors the mountain deity",
                    activities: ["Chaam dances", "Warrior dances", "Traditional ceremonies"],
                    emoji: "‚õ∞Ô∏è"
                },
                {
                    id: 14,
                    name: "Diwali",
                    category: "cultural",
                    date: "2024-11-12",
                    description: "Festival of lights celebrated by Hindu communities.",
                    location: "Throughout Sikkim",
                    significance: "Victory of light over darkness",
                    activities: ["Lighting diyas", "Fireworks", "Sweets distribution", "Lakshmi Puja"],
                    emoji: "‚ú®"
                },
                {
                    id: 15,
                    name: "Christmas",
                    category: "cultural",
                    date: "2024-12-25",
                    description: "Celebrated by Christian communities in Sikkim.",
                    location: "Churches across Sikkim",
                    significance: "Birth of Jesus Christ",
                    activities: ["Midnight mass", "Carol singing", "Community feasts", "Gift exchanges"],
                    emoji: "üéÑ"
                }
            ]
        };

        // Initialize App
        document.addEventListener('DOMContentLoaded', function() {
            loadFromStorage();
            renderPlaces();
            updateLoginStatus();
            initializeLiveData();
            updateAppUI();
            initializeCalendar();
            checkEmergencyBroadcast();
            initializeTripPlanner();
            
            // Mobile menu toggle
            document.getElementById('mobileMenuBtn').addEventListener('click', function() {
                document.getElementById('sidebar').classList.toggle('open');
            });
            
            // Close sidebar when clicking outside on mobile
            document.addEventListener('click', function(e) {
                const sidebar = document.getElementById('sidebar');
                const menuBtn = document.getElementById('mobileMenuBtn');
                if (window.innerWidth < 768 && !sidebar.contains(e.target) && !menuBtn.contains(e.target)) {
                    sidebar.classList.remove('open');
                }
            });
            
            // Auto-update live data every 5 minutes
            setInterval(autoUpdateLiveData, APP.appConfig.autoUpdateInterval);
            
            // Auto-generate slug when place name changes
            setTimeout(() => {
                const newPlaceNameField = document.getElementById('newPlaceName');
                const newPlaceSlugField = document.getElementById('newPlaceSlug');
                
                if (newPlaceNameField && newPlaceSlugField) {
                    newPlaceNameField.addEventListener('input', function() {
                        if (!newPlaceSlugField.value || newPlaceSlugField.value === generateSlug(this.dataset.previousValue || '')) {
                            newPlaceSlugField.value = generateSlug(this.value);
                        }
                        this.dataset.previousValue = this.value;
                    });
                }
            }, 1000);

            // Lewis mode change listener
            document.addEventListener('change', function(e) {
                if (e.target.name === 'lewisMode') {
                    const statusElement = document.getElementById('lewisStatus');
                    if (statusElement) {
                        statusElement.textContent = e.target.value === 'online' ? 'Online Mode Active' : 'Offline Mode Active';
                    }
                }
            });
        });

        // Storage Functions
        function saveToStorage() {
            localStorage.setItem('tourBuddyApp', JSON.stringify(APP));
        }

        function loadFromStorage() {
            const stored = localStorage.getItem('tourBuddyApp');
            if (stored) {
                const data = JSON.parse(stored);
                Object.assign(APP, data);
                // Ensure transport fields exist for backward compatibility
                if (APP.places && Array.isArray(APP.places)) {
                    APP.places = APP.places.map(p => Object.assign({busStop: 'Not available', busTime: 'N/A', trainStop: 'Not available', trainTime: 'N/A'}, p));
                }

            }
        }

        // Navigation Functions
        function showPage(pageId) {
            document.querySelectorAll('.page').forEach(page => page.style.display = 'none');
            document.getElementById(pageId + 'Page').style.display = 'block';
            
            // Update active nav button
            document.querySelectorAll('nav button').forEach(btn => {
                btn.className = btn.className.replace('bg-blue-50 text-blue-600', 'text-gray-600 hover:bg-gray-50');
            });
            event.target.className = event.target.className.replace('text-gray-600 hover:bg-gray-50', 'bg-blue-50 text-blue-600');
            
            // Close mobile menu
            document.getElementById('sidebar').classList.remove('open');
        }

        // Places Functions
        function renderPlaces() {
            const grid = document.getElementById('placesGrid');
            grid.innerHTML = '';
            
            APP.places.forEach(place => {
                const card = document.createElement('div');
                card.className = 'bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow';
                
                // Use cover image directly - no caching issues with data URLs
                const imageUrl = place.coverImage;
                
                card.innerHTML = `
                    <img src="${imageUrl}" alt="${place.name}" class="w-full h-48 object-cover" onerror="this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 400 300\\'%3E%3Crect width=\\'400\\' height=\\'300\\' fill=\\'%234facfe\\'/%3E%3Ctext x=\\'200\\' y=\\'150\\' text-anchor=\\'middle\\' fill=\\'white\\' font-size=\\'24\\'%3ESikkim%3C/text%3E%3C/svg%3E'">
                    <div class="p-6">
                        <h3 class="text-xl font-bold mb-2">${place.name}</h3>
                        <p class="text-gray-600 mb-4">${place.shortDescription}</p>
                        <p class="text-sm text-gray-500 mb-3"><strong>Bus:</strong> ${place.busStop || 'N/A'} (${place.busTime || 'N/A'}) ‚Ä¢ <strong>Train:</strong> ${place.trainStop || 'N/A'} (${place.trainTime || 'N/A'})</p>

                        <div class="flex gap-3">
                            <button onclick="openExploreModal(${place.id})" class="flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors">
                                Open
                            </button>
                            <button onclick="downloadOfflinePackage(${place.id})" class="flex-1 bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 transition-colors">
                                Download
                            </button>
                        </div>
                    </div>
                `;
                grid.appendChild(card);
            });
        }

        function filterPlaces() {
            const searchTerm = document.getElementById('searchBar').value.toLowerCase();
            const cards = document.querySelectorAll('#placesGrid > div');
            
            cards.forEach(card => {
                const text = card.textContent.toLowerCase();
                card.style.display = text.includes(searchTerm) ? 'block' : 'none';
            });
        }

        // Modal Functions
        function openExploreModal(placeId) {
            const place = APP.places.find(p => p.id === placeId);
            if (!place) return;
            
            APP.currentPlace = place;
            
            document.getElementById('modalTitle').textContent = place.name;
            document.getElementById('modalImage').src = place.coverImage;
            document.getElementById('modalDescription').textContent = place.longDescription;
            
            // Render quick facts
            const factsContainer = document.getElementById('modalFacts');
            factsContainer.innerHTML = '';
            Object.entries(place.quickFacts).forEach(([key, value]) => {
                const factCard = document.createElement('div');
                factCard.className = 'bg-gray-50 p-4 rounded-lg';
                factCard.innerHTML = `<div class="font-semibold">${key}</div><div class="text-gray-600">${value}</div>`;
                factsContainer.appendChild(factCard);
            });
            
            // Render gallery with stories
            const galleryContainer = document.getElementById('modalGallery');
            const galleryGrid = galleryContainer.querySelector('div');
            galleryGrid.innerHTML = '';
            place.gallery.forEach((item, index) => {
                const galleryItem = document.createElement('div');
                galleryItem.className = 'bg-white border rounded-lg p-4 hover:shadow-lg transition-shadow';
                galleryItem.innerHTML = `
                    <img src="${item.image}" alt="${item.label}" class="w-full h-48 object-cover rounded-lg mb-3">
                    <h4 class="font-semibold text-lg mb-2">${item.label}</h4>
                    <p class="text-sm text-gray-600 italic mb-3 leading-relaxed">${item.story || 'A beautiful view of this location.'}</p>
                    <div class="flex flex-wrap gap-2">
                        <button onclick="playNarration('${item.label}', ${index})" class="bg-blue-100 text-blue-800 px-3 py-1 rounded text-sm hover:bg-blue-200 transition-colors">
                            üîä Listen
                        </button>
                        <button onclick="showImageStory(${index})" class="bg-purple-100 text-purple-800 px-3 py-1 rounded text-sm hover:bg-purple-200 transition-colors">
                            üìñ Full Story
                        </button>
                        <button onclick="shareStory(${index})" class="bg-green-100 text-green-800 px-3 py-1 rounded text-sm hover:bg-green-200 transition-colors">
                            üì§ Share
                        </button>
                    </div>
                `;
                galleryGrid.appendChild(galleryItem);
            });
            
            
            // Populate transport info
            document.getElementById('modalBusStop').textContent = place.busStop || 'Not available';
            document.getElementById('modalBusTime').textContent = place.busTime || 'N/A';
            document.getElementById('modalTrainStop').textContent = place.trainStop || 'Not available';
            document.getElementById('modalTrainTime').textContent = place.trainTime || 'N/A';
            

document.getElementById('exploreModal').classList.add('active');
        }

        function closeModal() {
            document.getElementById('exploreModal').classList.remove('active');
        }

        function openFullPage() {
            if (!APP.currentPlace) return;
            
            const place = APP.currentPlace;
            document.getElementById('fullPageTitle').textContent = place.name;
            document.getElementById('fullPageImage').src = place.coverImage;
            
            const content = document.getElementById('fullPageContent');
            content.innerHTML = `
                <div class="mb-8">
                    <h2 class="text-2xl font-bold mb-4">About ${place.name}</h2>
                    <p class="text-lg leading-relaxed">${place.longDescription}</p>
                </div>
                
                <div class="mb-8">
                    <h2 class="text-2xl font-bold mb-4">Quick Facts</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        ${Object.entries(place.quickFacts).map(([key, value]) => 
                            `<div class="bg-gray-50 p-4 rounded-lg">
                                <div class="font-semibold">${key}</div>
                                <div class="text-gray-600">${value}</div>
                            </div>`
                        ).join('')}
                    </div>
                </div>
                
                <div class="mb-8">
                    <h2 class="text-2xl font-bold mb-4">Gallery with Stories & Narrations</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        ${place.gallery.map((item, index) => 
                            `<div class="bg-white border rounded-lg p-4">
                                <img src="${item.image}" alt="${item.label}" class="w-full h-48 object-cover rounded-lg mb-3">
                                <h3 class="font-semibold mb-2">${item.label}</h3>
                                <p class="text-sm text-gray-600 italic mb-3">${item.story || 'No story available for this image.'}</p>
                                <div class="flex flex-wrap gap-2">
                                    <button onclick="playNarration('${item.label}', ${index}, 'en')" class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">üá∫üá∏ EN</button>
                                    <button onclick="playNarration('${item.label}', ${index}, 'hi')" class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">üáÆüá≥ HI</button>
                                    <button onclick="playNarration('${item.label}', ${index}, 'ne')" class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">üá≥üáµ NE</button>
                                    <button onclick="showImageStory(${index})" class="bg-purple-100 text-purple-800 px-2 py-1 rounded text-sm">üìñ Story</button>
                                </div>
                            </div>`
                        ).join('')}
                    </div>
                </div>
            `;
            
            closeModal();
            document.getElementById('fullPageModal').classList.add('active');
        }

        function closeFullPage() {
            document.getElementById('fullPageModal').classList.remove('active');
        }

        // Narration Functions
        function playNarration(label, index, language = null) {
            if (!APP.currentPlace) return;
            
            const place = APP.currentPlace;
            const userLang = language || (APP.currentUser?.preferredLanguage || 'en');
            
            let text = place.narrations[userLang] || 
                      place.narrations['en'] || 
                      `Welcome to ${label}` || 
                      place.shortDescription;
            
            // Use Web Speech API for text-to-speech
            if (APP.synthesis) {
                APP.synthesis.cancel(); // Stop any ongoing speech
                
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = userLang === 'en' ? 'en-US' : 
                                userLang === 'hi' ? 'hi-IN' : 
                                userLang === 'ne' ? 'ne-NP' : 'en-US';
                utterance.rate = 0.8;
                utterance.pitch = 1;
                
                APP.synthesis.speak(utterance);
            }
        }

        // Tour Mode Functions
        function startTourMode() {
            APP.isTourActive = true;
            closeModal();
            
            // Initialize tour data
            APP.tourData = {
                startTime: new Date(),
                currentLocation: null,
                navigationActive: true,
                objectsRecognized: 0,
                distanceTraveled: 0
            };
            
            // Show tour mode interface immediately
            document.getElementById('tourMode').classList.add('active');
            
            // Start GPS tracking
            startGPSTracking();
            
            // Start vision analysis
            startVisionAnalysis();
            
            // Lewis welcome message
            speakLewis("Tour started. I am Lewis, your smart AI guide. I'm now tracking your GPS location and will analyze your surroundings every few seconds.");
            
            // Try to access camera (optional for enhanced experience)
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({ 
                    video: { facingMode: 'environment' }, 
                    audio: false 
                })
                .then(stream => {
                    const video = document.getElementById('cameraFeed');
                    video.srcObject = stream;
                    speakLewis("Camera access granted! I can now see through your camera for better guidance.");
                })
                .catch(err => {
                    console.log('Camera not available, using GPS and voice guidance only');
                    // Show a placeholder instead of camera feed
                    const video = document.getElementById('cameraFeed');
                    video.style.background = 'linear-gradient(45deg, #4facfe, #00f2fe)';
                    video.innerHTML = '<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: white; text-align: center; font-size: 18px;"><div>üó∫Ô∏è</div><div>GPS Navigation Mode</div><div style="font-size: 14px; margin-top: 10px;">Camera not available<br>Using voice guidance</div></div>';
                });
            } else {
                // Fallback for browsers without camera support
                const video = document.getElementById('cameraFeed');
                video.style.background = 'linear-gradient(45deg, #4facfe, #00f2fe)';
                video.innerHTML = '<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: white; text-align: center; font-size: 18px;"><div>üó∫Ô∏è</div><div>GPS Navigation Mode</div><div style="font-size: 14px; margin-top: 10px;">Voice-guided tour active</div></div>';
                speakLewis("GPS navigation active. I'll guide you with voice directions and location information.");
            }
            
            // Start continuous guidance
            startContinuousGuidance();
        }

        function captureImage() {
            const video = document.getElementById('cameraFeed');
            const canvas = document.createElement('canvas');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            
            const ctx = canvas.getContext('2d');
            ctx.drawImage(video, 0, 0);
            
            // Simulate image recognition
            setTimeout(() => {
                if (APP.currentPlace) {
                    speakLewis(`I can see ${APP.currentPlace.name}. ${APP.currentPlace.narrations.en || APP.currentPlace.shortDescription}`);
                } else {
                    speakLewis("I'm analyzing what I see. This looks like a beautiful location in Sikkim.");
                }
            }, 1000);
        }

        function startGPSTracking() {
            if (navigator.geolocation) {
                // Get initial position
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        APP.tourData.currentLocation = position;
                        const lat = position.coords.latitude.toFixed(4);
                        const lng = position.coords.longitude.toFixed(4);
                        speakLewis(`GPS locked! Your coordinates are ${lat}, ${lng}. I'm now tracking your movement.`);
                    },
                    (error) => {
                        console.log('GPS error:', error);
                        speakLewis("GPS not available, but I can still guide you with voice directions and local information.");
                    }
                );
                
                // Watch position changes
                APP.tourData.watchId = navigator.geolocation.watchPosition(
                    (position) => {
                        const oldLocation = APP.tourData.currentLocation;
                        APP.tourData.currentLocation = position;
                        
                        if (oldLocation) {
                            const distance = calculateDistance(
                                oldLocation.coords.latitude, oldLocation.coords.longitude,
                                position.coords.latitude, position.coords.longitude
                            );
                            
                            if (distance > 10) { // Moved more than 10 meters
                                APP.tourData.distanceTraveled += distance;
                                speakLewis(`You've moved ${Math.round(distance)} meters. I'm updating your navigation.`);
                            }
                        }
                    },
                    (error) => console.log('GPS watch error:', error),
                    { enableHighAccuracy: true, maximumAge: 10000, timeout: 5000 }
                );
            } else {
                speakLewis("GPS not supported on this device, but I can still provide voice guidance and information.");
            }
        }

        function startVisionAnalysis() {
            // Simulate continuous vision analysis
            APP.tourData.visionInterval = setInterval(() => {
                if (APP.isTourActive && !APP.isMuted) {
                    performVisionAnalysis();
                }
            }, 8000); // Analyze every 8 seconds
        }

        function performVisionAnalysis() {
            const visionResponses = [
                "I can see beautiful mountain terrain ahead. This looks like typical Sikkim landscape.",
                "I notice prayer flags in the distance - a sign we're near a Buddhist site.",
                "The vegetation here suggests we're at a good altitude for rhododendrons.",
                "I can see traditional architecture - possibly a monastery or local building.",
                "The rocky terrain and elevation indicate we're in the high-altitude region.",
                "I spot some local wildlife - keep your camera ready!",
                "The path ahead looks clear and safe for walking.",
                "I can see other tourists nearby - you're on the right track!"
            ];
            
            const response = visionResponses[Math.floor(Math.random() * visionResponses.length)];
            APP.tourData.objectsRecognized++;
            
            // Only speak if not muted
            if (!APP.isMuted) {
                speakLewis(response);
            } else {
                // Update visual message even when muted
                document.getElementById('lewisMessage').textContent = `Lewis: ${response}`;
            }
        }

        function startContinuousGuidance() {
            // Provide guidance every 15 seconds
            APP.tourData.guidanceInterval = setInterval(() => {
                if (APP.isTourActive && !APP.isMuted) {
                    provideContinuousGuidance();
                }
            }, 15000);
        }

        function provideContinuousGuidance() {
            const guidanceMessages = [
                "Stay on the main path and follow the signs. I'm monitoring your location.",
                "Take your time to enjoy the scenery. Let me know if you need any information.",
                "Remember to stay hydrated at this altitude. The air is thinner here.",
                "Feel free to ask me about anything you see - I have extensive knowledge about this area.",
                "If you need directions to facilities like restrooms or shops, just ask me.",
                "The weather looks good for exploring. Perfect conditions for photography!",
                "Keep an eye out for local wildlife, but maintain a safe distance.",
                "This is a great spot for taking photos. The lighting is excellent right now."
            ];
            
            const message = guidanceMessages[Math.floor(Math.random() * guidanceMessages.length)];
            speakLewis(message);
        }

        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371e3; // Earth's radius in meters
            const œÜ1 = lat1 * Math.PI/180;
            const œÜ2 = lat2 * Math.PI/180;
            const ŒîœÜ = (lat2-lat1) * Math.PI/180;
            const ŒîŒª = (lon2-lon1) * Math.PI/180;

            const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
                      Math.cos(œÜ1) * Math.cos(œÜ2) *
                      Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

            return R * c; // Distance in meters
        }

        function stopTour() {
            APP.isTourActive = false;
            
            // Stop all intervals
            if (APP.tourData) {
                if (APP.tourData.watchId) {
                    navigator.geolocation.clearWatch(APP.tourData.watchId);
                }
                if (APP.tourData.visionInterval) {
                    clearInterval(APP.tourData.visionInterval);
                }
                if (APP.tourData.guidanceInterval) {
                    clearInterval(APP.tourData.guidanceInterval);
                }
                
                // Calculate tour statistics
                const duration = Math.round((new Date() - APP.tourData.startTime) / 1000 / 60); // minutes
                const distance = Math.round(APP.tourData.distanceTraveled);
                const objects = APP.tourData.objectsRecognized;
                
                speakLewis(`Tour completed! Duration: ${duration} minutes. Distance: ${distance} meters. Objects recognized: ${objects}. Thank you for exploring with Lewis!`);
            }
            
            // Stop camera
            const video = document.getElementById('cameraFeed');
            if (video.srcObject) {
                video.srcObject.getTracks().forEach(track => track.stop());
            }
            
            // Clear video content
            video.innerHTML = '';
            video.style.background = '';
            
            document.getElementById('tourMode').classList.remove('active');
        }

        function speakLewis(message) {
            document.getElementById('lewisMessage').textContent = `Lewis: ${message}`;
            
            if (APP.synthesis && !APP.isMuted) {
                const utterance = new SpeechSynthesisUtterance(message);
                utterance.rate = 0.9;
                utterance.pitch = 1.1;
                utterance.lang = APP.currentUser?.preferredLanguage === 'hi' ? 'hi-IN' : 'en-US';
                APP.synthesis.speak(utterance);
            }
        }

        // Voice Interaction Functions
        function toggleVoiceInteraction() {
            if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
                speakLewis('Voice interaction is not supported in this browser. You can still use the Ask button to type your questions.');
                return;
            }
            
            if (APP.isListening) {
                stopListening();
            } else {
                startListening();
            }
        }

        function startListening() {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            APP.recognition = new SpeechRecognition();
            
            APP.recognition.continuous = false;
            APP.recognition.interimResults = false;
            APP.recognition.lang = APP.currentUser?.preferredLanguage === 'hi' ? 'hi-IN' : 'en-US';
            
            APP.recognition.onstart = function() {
                APP.isListening = true;
                document.getElementById('voiceBtn').innerHTML = 'üî¥ Listening...';
                document.getElementById('voiceBtn').className = 'bg-red-600 text-white px-3 py-3 rounded-lg hover:bg-red-700 transition-colors';
                speakLewis("I'm listening. What would you like to know?");
            };
            
            APP.recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript;
                handleVoiceCommand(transcript);
            };
            
            APP.recognition.onerror = function(event) {
                console.error('Speech recognition error:', event.error);
                speakLewis("Sorry, I didn't catch that. Please try again or use the Ask button.");
                stopListening();
            };
            
            APP.recognition.onend = function() {
                stopListening();
            };
            
            APP.recognition.start();
        }

        function stopListening() {
            APP.isListening = false;
            document.getElementById('voiceBtn').innerHTML = 'üé§ Talk';
            document.getElementById('voiceBtn').className = 'bg-green-600 text-white px-3 py-3 rounded-lg hover:bg-green-700 transition-colors';
            
            if (APP.recognition) {
                APP.recognition.stop();
            }
        }

        function handleVoiceCommand(command) {
            const lowerCommand = command.toLowerCase();
            
            speakLewis(`I heard you say: "${command}". Let me help you with that.`);
            
            // Process different types of voice commands
            if (lowerCommand.includes('where') || lowerCommand.includes('location') || lowerCommand.includes('navigate')) {
                handleLocationQuery(command);
            } else if (lowerCommand.includes('what') && (lowerCommand.includes('see') || lowerCommand.includes('looking'))) {
                handleVisionQuery(command);
            } else if (lowerCommand.includes('tell me') || lowerCommand.includes('about') || lowerCommand.includes('story')) {
                handleInformationQuery(command);
            } else if (lowerCommand.includes('direction') || lowerCommand.includes('way') || lowerCommand.includes('how to get')) {
                handleDirectionQuery(command);
            } else if (lowerCommand.includes('photo') || lowerCommand.includes('picture') || lowerCommand.includes('capture')) {
                handlePhotoCommand(command);
            } else if (lowerCommand.includes('stop') || lowerCommand.includes('pause') || lowerCommand.includes('quiet')) {
                handleStopCommand(command);
            } else {
                // General query - use the same logic as Ask Lewis
                setTimeout(() => {
                    const response = getOfflineResponse(command);
                    speakLewis(response);
                }, 1000);
            }
        }

        function handleLocationQuery(command) {
            if (APP.tourData && APP.tourData.currentLocation) {
                const lat = APP.tourData.currentLocation.coords.latitude.toFixed(4);
                const lng = APP.tourData.currentLocation.coords.longitude.toFixed(4);
                speakLewis(`You are currently at coordinates ${lat}, ${lng}. ${APP.currentPlace ? `You're exploring ${APP.currentPlace.name}.` : 'You\'re in a beautiful area of Sikkim.'} Would you like directions to a specific location?`);
            } else {
                speakLewis("I'm still getting your location. GPS tracking is active and I'll have your coordinates shortly.");
            }
        }

        function handleVisionQuery(command) {
            speakLewis("Let me analyze what I can see through your camera right now...");
            
            setTimeout(() => {
                // Trigger immediate vision analysis
                performVisionAnalysis();
                
                setTimeout(() => {
                    speakLewis("I'm continuously analyzing your surroundings. Point your camera towards anything specific you'd like me to identify or explain.");
                }, 2000);
            }, 1000);
        }

        function handleInformationQuery(command) {
            if (APP.currentPlace) {
                const place = APP.currentPlace;
                speakLewis(`Let me tell you about ${place.name}. ${place.longDescription} This location is at ${place.quickFacts.Altitude || 'high altitude'} and is known as ${place.quickFacts.Type || 'a special destination'}. The best time to visit is ${place.quickFacts['Best Time'] || 'year round'}.`);
            } else {
                speakLewis("I can share information about any location in Sikkim. Which place would you like to know about? I have detailed information about monasteries, lakes, mountains, and cultural sites.");
            }
        }

        function handleDirectionQuery(command) {
            if (APP.tourData && APP.tourData.navigationActive) {
                speakLewis("I'm already providing turn-by-turn navigation. Continue following my directions. If you're lost, I can recalculate the route based on your current GPS position.");
            } else {
                speakLewis("I can start navigation for you. Where would you like to go? I can guide you to popular destinations like Tsomgo Lake, Rumtek Monastery, or other attractions in Sikkim.");
            }
        }

        function handlePhotoCommand(command) {
            speakLewis("Great idea! I'll help you capture the perfect shot. Let me analyze the current scene for the best composition.");
            
            setTimeout(() => {
                captureImage();
            }, 2000);
        }

        function handleStopCommand(command) {
            if (command.toLowerCase().includes('stop talking') || command.toLowerCase().includes('quiet')) {
                toggleMute();
            } else {
                speakLewis("Would you like me to stop the tour completely, or just pause my commentary? Say 'mute' to stop my voice, or 'stop tour' to end the tour.");
            }
        }

        function askLewisInTour() {
            const question = prompt("What would you like to ask Lewis about this location?");
            if (question && question.trim()) {
                handleVoiceCommand(question.trim());
            }
        }

        function toggleMute() {
            APP.isMuted = !APP.isMuted;
            const muteBtn = document.getElementById('muteBtn');
            
            if (APP.isMuted) {
                muteBtn.innerHTML = 'üîá Unmute';
                muteBtn.className = 'bg-gray-600 text-white px-3 py-3 rounded-lg hover:bg-gray-700 transition-colors';
                
                // Stop any current speech
                if (APP.synthesis) {
                    APP.synthesis.cancel();
                }
                
                // Show visual message since audio is muted
                document.getElementById('lewisMessage').textContent = 'Lewis: Audio muted. I\'m still analyzing and tracking, but won\'t speak until unmuted.';
            } else {
                muteBtn.innerHTML = 'üîä Mute';
                muteBtn.className = 'bg-orange-600 text-white px-3 py-3 rounded-lg hover:bg-orange-700 transition-colors';
                speakLewis("Audio restored! I'm back to guide you with voice commentary.");
            }
        }

        // Image Story Functions
        function showImageStory(imageIndex) {
            if (!APP.currentPlace || !APP.currentPlace.gallery[imageIndex]) return;
            
            const imageData = APP.currentPlace.gallery[imageIndex];
            
            document.getElementById('storyModalTitle').textContent = imageData.label;
            document.getElementById('storyModalImage').src = imageData.image;
            document.getElementById('storyModalContent').textContent = imageData.story || 'No story available for this image.';
            
            document.getElementById('imageStoryModal').classList.add('active');
        }

        function closeImageStory() {
            document.getElementById('imageStoryModal').classList.remove('active');
        }

        function readStoryAloud() {
            const storyText = document.getElementById('storyModalContent').textContent;
            
            if (APP.synthesis && storyText) {
                APP.synthesis.cancel(); // Stop any ongoing speech
                
                const utterance = new SpeechSynthesisUtterance(storyText);
                const userLang = APP.currentUser?.preferredLanguage || 'en';
                utterance.lang = userLang === 'en' ? 'en-US' : 
                                userLang === 'hi' ? 'hi-IN' : 
                                userLang === 'ne' ? 'ne-NP' : 'en-US';
                utterance.rate = 0.7; // Slower for story reading
                utterance.pitch = 1;
                
                APP.synthesis.speak(utterance);
            }
        }

        function shareStory(imageIndex) {
            if (!APP.currentPlace || !APP.currentPlace.gallery[imageIndex]) return;
            
            const imageData = APP.currentPlace.gallery[imageIndex];
            const shareText = `${imageData.label} - ${APP.currentPlace.name}\n\n${imageData.story}\n\nShared from Tour Buddy - Sikkim Heritage Guide`;
            
            if (navigator.share) {
                navigator.share({
                    title: `${imageData.label} - ${APP.currentPlace.name}`,
                    text: shareText,
                    url: window.location.href
                }).catch(console.error);
            } else {
                // Fallback: copy to clipboard
                navigator.clipboard.writeText(shareText).then(() => {
                    alert('Story copied to clipboard! You can now paste it anywhere to share.');
                }).catch(() => {
                    // Final fallback: show in alert
                    alert(`Share this story:\n\n${shareText}`);
                });
            }
        }

        // Ask Lewis Functions
        function askLewis() {
            document.getElementById('askLewisModal').classList.add('active');
        }

        function closeAskLewis() {
            document.getElementById('askLewisModal').classList.remove('active');
        }

        function sendToLewis() {
            const input = document.getElementById('lewisInput');
            const question = input.value.trim();
            if (!question) return;
            
            const isOnline = document.querySelector('input[name="lewisMode"]:checked').value === 'online';
            
            // Add user message to chat
            addChatMessage('user', question);
            input.value = '';
            
            // Show typing indicator
            addChatMessage('lewis', 'ü§î Lewis is thinking...');
            
            if (isOnline) {
                getOnlineResponse(question);
            } else {
                setTimeout(() => {
                    removeTypingIndicator();
                    const response = getOfflineResponse(question);
                    addChatMessage('lewis', response);
                    speakResponse(response);
                }, 1000);
            }
        }

        function getOfflineResponse(question) {
            const q = question.toLowerCase();
            
            // Comprehensive FAQ database for offline responses
            const faqDatabase = [
                { keywords: ["sikkim", "about", "what is"], answer: "Sikkim is a beautiful state in northeastern India, known for its stunning Himalayan landscapes, Buddhist monasteries, and rich cultural heritage." },
                { keywords: ["capital", "gangtok"], answer: "Gangtok is the capital city of Sikkim, located at an altitude of 1,650 meters. It's the main hub for tourists visiting Sikkim." },
                { keywords: ["language", "speak", "languages"], answer: "The main languages spoken in Sikkim are Nepali, Hindi, English, Bhutia, and Lepcha. English and Hindi are widely understood." },
                { keywords: ["currency", "money", "rupee"], answer: "Indian Rupee (INR) is the currency used in Sikkim. ATMs are available in major towns like Gangtok, Pelling, and Namchi." },
                { keywords: ["weather", "climate", "temperature"], answer: "Sikkim has a temperate climate. Summer (March-June) is pleasant, monsoon (July-September) brings heavy rain, and winter (October-February) can be cold with snow at higher altitudes." },
                { keywords: ["permit", "inner line", "ilp"], answer: "Indian citizens don't need permits for most areas. Foreign nationals need Protected Area Permits (PAP) for certain restricted areas like Nathula Pass." },
                { keywords: ["best time", "visit", "when"], answer: "March to June and September to December are the best times to visit Sikkim. Avoid monsoon season (July-September) due to heavy rainfall and landslides." },
                { keywords: ["how to reach", "airport", "train"], answer: "Nearest airport is Bagdogra (124km from Gangtok). Nearest railway station is New Jalpaiguri (148km). From there, take shared taxis or buses to Gangtok." },
                { keywords: ["accommodation", "hotels", "stay"], answer: "Sikkim offers various accommodations from budget homestays to luxury resorts. Book in advance during peak season (March-June, October-December)." },
                { keywords: ["food", "cuisine", "eat"], answer: "Try local dishes like momos, thukpa, gundruk, sel roti, and chang. Tibetan and Nepali cuisines are popular along with Indian food." },
                { keywords: ["tsomgo", "changu", "lake"], answer: "Tsomgo Lake is a sacred glacial lake at 12,313 feet. It's 40km from Gangtok and requires a permit. Best visited March-June when not frozen." },
                { keywords: ["nathula", "pass", "border"], answer: "Nathula Pass is at 14,140 feet on the Indo-China border. Requires special permits and is open Wednesday, Thursday, Saturday, and Sunday only." },
                { keywords: ["rumtek", "monastery"], answer: "Rumtek Monastery is the largest in Sikkim and seat of the Karmapa. It's 24km from Gangtok and showcases beautiful Tibetan architecture." },
                { keywords: ["pelling", "kanchenjunga"], answer: "Pelling offers stunning views of Kanchenjunga peak. Visit Pemayangtse Monastery and Rabdentse Ruins nearby." },
                { keywords: ["yuksom", "trekking"], answer: "Yuksom is the base for Goecha La trek and other high-altitude treks. It's the first capital of Sikkim with historical significance." },
                { keywords: ["gurudongmar", "lake", "north"], answer: "Gurudongmar Lake at 17,800 feet is one of the highest lakes in the world. Requires permits and is accessible only in good weather." },
                { keywords: ["trekking", "hiking", "trek"], answer: "Popular treks include Goecha La, Kanchenjunga Base Camp, Dzongri, and Green Lake. Best season is March-May and September-November." },
                { keywords: ["river rafting", "teesta"], answer: "River rafting is available on Teesta and Rangit rivers. Best time is October to April when water levels are suitable." },
                { keywords: ["cable car", "ropeway"], answer: "Gangtok has a cable car service offering panoramic views of the city and surrounding mountains." },
                { keywords: ["paragliding", "adventure"], answer: "Paragliding is available in Gangtok and other locations. Best done during clear weather with professional operators." },
                { keywords: ["festival", "losar", "dashain"], answer: "Major festivals include Losar (Tibetan New Year), Dashain, Tihar, Buddha Jayanti, and Saga Dawa. Each has unique cultural significance." },
                { keywords: ["buddhist", "monastery", "gompa"], answer: "Sikkim has numerous Buddhist monasteries like Rumtek, Pemayangtse, Tashiding, and Enchey. They showcase rich Tibetan Buddhist culture." },
                { keywords: ["handicraft", "shopping", "souvenir"], answer: "Buy traditional handicrafts like carpets, masks, thankas, wooden items, and local tea. MG Marg in Gangtok is great for shopping." },
                { keywords: ["emergency", "hospital", "police"], answer: "Emergency numbers: Police 100, Ambulance 108, Fire 101. STNM Hospital in Gangtok is the main government hospital." },
                { keywords: ["internet", "network", "connectivity"], answer: "Mobile networks work well in main towns. BSNL has better coverage in remote areas. WiFi is available in most hotels and cafes." },
                { keywords: ["atm", "bank", "money exchange"], answer: "ATMs are available in Gangtok, Pelling, Namchi, and other major towns. Carry cash for remote areas as card acceptance is limited." },
                { keywords: ["transport", "taxi", "bus"], answer: "Shared taxis and buses connect major towns. Private taxis can be hired for sightseeing. Book vehicles in advance during peak season." },
                { keywords: ["altitude", "sickness", "health"], answer: "Acclimatize gradually to high altitudes. Stay hydrated, avoid alcohol, and consult doctors if experiencing severe headaches or breathing issues." },
                { keywords: ["momo", "dumpling"], answer: "Momos are steamed dumplings filled with vegetables or meat, served with spicy sauce. They're the most popular local food." },
                { keywords: ["thukpa", "soup", "noodle"], answer: "Thukpa is a hearty noodle soup with vegetables or meat, perfect for cold weather. It's a staple Tibetan dish." },
                { keywords: ["chang", "local drink", "alcohol"], answer: "Chang is a traditional fermented millet beer. It's mildly alcoholic and served warm, especially during festivals." },
                { keywords: ["tea", "temi", "garden"], answer: "Temi Tea Garden produces high-quality tea. You can visit the garden and buy fresh tea directly from the source." },
                { keywords: ["safety", "precaution", "danger"], answer: "Sikkim is generally safe. Be cautious during monsoons due to landslides. Carry warm clothes for high altitudes and inform someone about your travel plans." },
                { keywords: ["cost", "budget", "expensive"], answer: "Sikkim can be budget-friendly to expensive depending on choices. Budget travelers can manage with ‚Çπ1500-2500 per day including accommodation and food." },
                { keywords: ["custom", "tradition", "culture"], answer: "Respect local customs: remove shoes before entering monasteries, don't point feet towards altars, dress modestly, and ask before photographing." },
                { keywords: ["festival", "celebration", "event"], answer: "Sikkim celebrates many festivals throughout the year including Losar (Tibetan New Year), Buddha Jayanti, Dashain, Tihar, and seasonal festivals like Rhododendron Festival. Check the Festival Calendar for dates and details." },
                { keywords: ["losar", "tibetan new year"], answer: "Losar is the most important Tibetan Buddhist festival, usually celebrated in February. It marks the beginning of the Tibetan calendar year with monastery prayers, traditional dances, and family celebrations." },
                { keywords: ["dashain", "durga puja"], answer: "Dashain is the major Hindu festival celebrated by the Nepali community in October. It's a 10-day celebration honoring Goddess Durga and celebrating the victory of good over evil." },
                { keywords: ["buddha jayanti", "buddha birthday"], answer: "Buddha Jayanti celebrates the birth, enlightenment, and death of Lord Buddha. It's observed in May with special prayers, meditation sessions, and processions at monasteries." },
                { keywords: ["rhododendron", "flower festival"], answer: "The Rhododendron Festival is held in April-May when Sikkim's state flower blooms. Best viewed in Yumthang Valley and Barsey Rhododendron Sanctuary with nature walks and photography tours." },
                { keywords: ["pang lhabsol", "kanchenjunga"], answer: "Pang Lhabsol is unique to Sikkim, worshipping Mount Kanchenjunga as the guardian deity. Celebrated in August with traditional Chaam dances and warrior performances." }
            ];
            
            // Search through FAQ database
            for (const faq of faqDatabase) {
                for (const keyword of faq.keywords) {
                    if (q.includes(keyword)) {
                        return faq.answer;
                    }
                }
            }
            
            // If current place is selected, check place-specific Q&A
            if (APP.currentPlace) {
                const place = APP.currentPlace;
                
                // Check place-specific Q&A pairs
                for (const qa of place.qna) {
                    if (q.includes(qa.question.toLowerCase().split(' ')[0])) {
                        return qa.answer;
                    }
                }
                
                // Place-specific responses
                if (q.includes('time') || q.includes('when')) {
                    return `The best time to visit ${place.name} is ${place.quickFacts['Best Time'] || 'mentioned in the place details'}. ${place.quickFacts['Best Time'] ? 'This is when weather conditions are most favorable.' : 'Check the place details for specific timing information.'}`;
                }
                
                if (q.includes('how') || q.includes('reach') || q.includes('get')) {
                    return `${place.name} is located ${place.quickFacts['Distance from Gangtok'] || 'in Sikkim'}. You can hire a taxi or join a tour group from Gangtok. ${place.quickFacts['Distance from Gangtok'] ? 'The journey offers beautiful mountain views.' : ''}`;
                }
                
                if (q.includes('what') || q.includes('about')) {
                    return `${place.longDescription || place.shortDescription}`;
                }
                
                if (q.includes('altitude') || q.includes('height')) {
                    return place.quickFacts['Altitude'] ? `${place.name} is located at ${place.quickFacts['Altitude']}. Make sure to acclimatize properly at this altitude.` : `The altitude information for ${place.name} is not available in our database.`;
                }
                
                return `I can help you with information about ${place.name}. Try asking about visiting times, how to reach, altitude, or what makes this place special.`;
            }
            
            // General fallback responses
            const generalResponses = [
                "I'm Lewis, your offline guide to Sikkim! I have 500+ FAQs stored offline. Ask me about places to visit, travel tips, culture, food, or anything about Sikkim tourism.",
                "I have extensive knowledge about Sikkim stored offline. Try asking about specific places like Tsomgo Lake, Gangtok, monasteries, or travel information.",
                "As your offline guide, I can help with questions about Sikkim's weather, permits, transportation, accommodation, food, and tourist attractions.",
                "I'm here to help with your Sikkim travel questions! Ask about trekking, festivals, local customs, or any specific place you want to visit."
            ];
            
            return generalResponses[Math.floor(Math.random() * generalResponses.length)];
        }

        function getOnlineResponse(question) {
            // Simulate online AI response (in production, this would call OpenAI API)
            const onlineResponses = [
                "Based on my online knowledge, " + getOfflineResponse(question) + " I can also access real-time information and provide more detailed insights when connected to the internet.",
                "Let me search my online database... " + getOfflineResponse(question) + " Additionally, I can provide current weather conditions, live road updates, and recent traveler reviews.",
                "Connecting to live data sources... " + getOfflineResponse(question) + " I can also check current permit requirements, hotel availability, and real-time transportation schedules.",
                "Accessing comprehensive travel database... " + getOfflineResponse(question) + " With online access, I can provide personalized recommendations based on current conditions and recent visitor feedback."
            ];
            
            // Simulate API delay
            setTimeout(() => {
                removeTypingIndicator();
                const response = onlineResponses[Math.floor(Math.random() * onlineResponses.length)];
                addChatMessage('lewis', response);
                speakResponse(response);
            }, 2000);
        }

        function removeTypingIndicator() {
            const chatHistory = document.getElementById('chatHistory');
            const lastMessage = chatHistory.lastElementChild;
            if (lastMessage && lastMessage.textContent.includes('Lewis is thinking')) {
                lastMessage.remove();
            }
        }

        // Image scanning functions
        function scanImage() {
            const isOnline = document.querySelector('input[name="lewisMode"]:checked').value === 'online';
            if (!isOnline) {
                alert('Image scanning requires online mode. Please switch to online mode to use this feature.');
                return;
            }
            document.getElementById('imageUpload').click();
        }

        function handleImageUpload(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            if (!file.type.startsWith('image/')) {
                alert('Please select a valid image file.');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById('uploadedImage').src = e.target.result;
                document.getElementById('imagePreview').classList.remove('hidden');
            };
            reader.readAsDataURL(file);
        }

        function analyzeImage() {
            const isOnline = document.querySelector('input[name="lewisMode"]:checked').value === 'online';
            if (!isOnline) {
                alert('Image analysis requires online mode.');
                return;
            }
            
            // Show analyzing message
            addChatMessage('lewis', 'üì∑ Analyzing your image...');
            
            // Simulate image analysis (in production, this would use OpenAI Vision API)
            setTimeout(() => {
                removeTypingIndicator();
                
                const imageAnalysisResponses = [
                    "I can see this appears to be a mountain landscape, possibly from Sikkim! The terrain looks like it could be near Tsomgo Lake or Nathula Pass area. The rocky formations and altitude suggest this is in the high-altitude region of East Sikkim. Would you like specific information about this area?",
                    "This looks like a Buddhist monastery or temple structure! Based on the architectural style, it could be Rumtek Monastery or another gompa in Sikkim. The traditional Tibetan architecture with colorful prayer flags is characteristic of Sikkim's Buddhist heritage. What would you like to know about this place?",
                    "I can identify this as a typical Sikkim landscape with rhododendron flowers! These beautiful blooms are Sikkim's state flower and bloom between March-May. The mountainous backdrop suggests this could be in the Yumthang Valley or similar high-altitude area. Perfect timing for photography!",
                    "This appears to be a traditional Sikkimese market or street scene! I can see local vendors and traditional items. This looks like it could be from MG Marg in Gangtok or a local bazaar. The architecture and setting are typical of Sikkim's urban areas. Would you like recommendations for shopping or local experiences?",
                    "I can see this is a trekking trail or mountain path in Sikkim! The terrain and vegetation suggest this could be part of the Goecha La trek or another popular trekking route. The altitude and landscape are characteristic of Sikkim's trekking regions. Are you planning a trek or need trail information?"
                ];
                
                const response = imageAnalysisResponses[Math.floor(Math.random() * imageAnalysisResponses.length)];
                addChatMessage('lewis', response);
                speakResponse(response);
            }, 3000);
        }

        function clearImage() {
            document.getElementById('imagePreview').classList.add('hidden');
            document.getElementById('imageUpload').value = '';
        }

        function addChatMessage(sender, message) {
            const chatHistory = document.getElementById('chatHistory');
            const messageDiv = document.createElement('div');
            messageDiv.className = `p-3 rounded-lg ${sender === 'user' ? 'bg-blue-100 ml-8' : 'bg-gray-100 mr-8'}`;
            messageDiv.innerHTML = `<div class="font-semibold text-sm">${sender === 'user' ? 'You' : 'Lewis'}</div><div>${message}</div>`;
            chatHistory.appendChild(messageDiv);
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }

        function speakResponse(text) {
            const userLang = APP.currentUser?.preferredLanguage || 'en';
            
            if (APP.synthesis) {
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = userLang === 'en' ? 'en-US' : 
                                userLang === 'hi' ? 'hi-IN' : 'en-US';
                APP.synthesis.speak(utterance);
            }
        }

        function startVoiceInput() {
            if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
                alert('Voice input is not supported in this browser.');
                return;
            }
            
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            APP.recognition = new SpeechRecognition();
            
            APP.recognition.continuous = false;
            APP.recognition.interimResults = false;
            APP.recognition.lang = APP.currentUser?.preferredLanguage === 'hi' ? 'hi-IN' : 'en-US';
            
            APP.recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript;
                document.getElementById('lewisInput').value = transcript;
            };
            
            APP.recognition.onerror = function(event) {
                console.error('Speech recognition error:', event.error);
            };
            
            APP.recognition.start();
        }

        // SOS Functions
        function triggerSOS() {
            document.getElementById('sosModal').classList.add('active');
        }

        function closeSOS() {
            document.getElementById('sosModal').classList.remove('active');
        }

        function confirmSOS() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(sendSOSMessage, handleLocationError);
            } else {
                sendSOSMessage(null);
            }
        }

        function sendSOSMessage(position) {
            const timestamp = new Date().toISOString();
            let location = 'Location unavailable';
            
            if (position) {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;
                location = `https://maps.google.com/?q=${lat},${lon}`;
            }
            
            const message = `SOS! Please help, I need assistance.\nLocation: ${location}\nTime: ${timestamp}`;
            
            // In a real app, this would send SMS to emergency contacts
            const contacts = [];
            if (APP.settings.policeNumber) contacts.push(`Police: ${APP.settings.policeNumber}`);
            if (APP.settings.ambulanceNumber) contacts.push(`Ambulance: ${APP.settings.ambulanceNumber}`);
            if (APP.currentUser) {
                if (APP.currentUser.relative1) contacts.push(`Relative 1: ${APP.currentUser.relative1}`);
                if (APP.currentUser.relative2) contacts.push(`Relative 2: ${APP.currentUser.relative2}`);
                if (APP.currentUser.emergency1) contacts.push(`Emergency 1: ${APP.currentUser.emergency1}`);
                if (APP.currentUser.emergency2) contacts.push(`Emergency 2: ${APP.currentUser.emergency2}`);
            }
            
            // Log SOS event
            APP.sosLogs.push({
                timestamp,
                location,
                contacts: contacts.length,
                message
            });
            
            saveToStorage();
            
            alert(`SOS sent to ${contacts.length} contacts:\n${contacts.join('\n')}\n\nMessage: ${message}`);
            closeSOS();
        }

        function handleLocationError(error) {
            console.error('Location error:', error);
            sendSOSMessage(null);
        }

        // Profile Functions
        function handleLogin() {
            const name = document.getElementById('loginName').value.trim();
            const phone = document.getElementById('loginPhone').value.trim();
            const password = document.getElementById('loginPassword').value.trim();
            
            if (!name || !phone || !password) {
                alert('Please fill in all fields.');
                return;
            }
            
            APP.currentUser = {
                name,
                phone,
                password,
                preferredLanguage: 'en',
                relative1: '',
                relative2: '',
                emergency1: '',
                emergency2: ''
            };
            
            APP.isLoggedIn = true;
            updateLoginStatus();
            saveToStorage();
            
            alert('Login successful!');
        }

        function saveProfile() {
            if (!APP.currentUser) return;
            
            APP.currentUser.name = document.getElementById('profileName').value.trim();
            APP.currentUser.preferredLanguage = document.getElementById('preferredLanguage').value;
            APP.currentUser.relative1 = document.getElementById('relative1').value.trim();
            APP.currentUser.relative2 = document.getElementById('relative2').value.trim();
            APP.currentUser.emergency1 = document.getElementById('emergency1').value.trim();
            APP.currentUser.emergency2 = document.getElementById('emergency2').value.trim();
            
            saveToStorage();
            alert('Profile saved successfully!');
        }

        function logout() {
            APP.currentUser = null;
            APP.isLoggedIn = false;
            updateLoginStatus();
            saveToStorage();
            showPage('home');
        }

        function updateLoginStatus() {
            const loginForm = document.getElementById('loginForm');
            const profileForm = document.getElementById('profileForm');
            const logoutBtn = document.getElementById('logoutBtn');
            
            if (APP.isLoggedIn && APP.currentUser) {
                loginForm.style.display = 'none';
                profileForm.style.display = 'block';
                logoutBtn.style.display = 'block';
                
                // Populate profile form
                document.getElementById('profileName').value = APP.currentUser.name || '';
                document.getElementById('profilePhone').value = APP.currentUser.phone || '';
                document.getElementById('preferredLanguage').value = APP.currentUser.preferredLanguage || 'en';
                document.getElementById('relative1').value = APP.currentUser.relative1 || '';
                document.getElementById('relative2').value = APP.currentUser.relative2 || '';
                document.getElementById('emergency1').value = APP.currentUser.emergency1 || '';
                document.getElementById('emergency2').value = APP.currentUser.emergency2 || '';
            } else {
                loginForm.style.display = 'block';
                profileForm.style.display = 'none';
                logoutBtn.style.display = 'none';
            }
        }

        // Calendar Functions
        function initializeCalendar() {
            renderCalendar();
            renderUpcomingEvents();
            renderFestivalsList();
        }

        function renderCalendar() {
            const currentDate = APP.currentCalendarDate;
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            
            // Update month/year display
            const monthNames = ["January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"];
            document.getElementById('currentMonthYear').textContent = `${monthNames[month]} ${year}`;
            
            // Get first day of month and number of days
            const firstDay = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();
            
            const calendarGrid = document.getElementById('calendarGrid');
            calendarGrid.innerHTML = '';
            
            // Add empty cells for days before month starts
            for (let i = 0; i < firstDay; i++) {
                const emptyCell = document.createElement('div');
                emptyCell.className = 'p-2';
                calendarGrid.appendChild(emptyCell);
            }
            
            // Add days of the month
            for (let day = 1; day <= daysInMonth; day++) {
                const dayCell = document.createElement('div');
                const cellDate = new Date(year, month, day);
                const dateString = cellDate.toISOString().split('T')[0];
                
                // Check if this date has any festivals
                const dayFestivals = APP.festivals.filter(festival => {
                    const festivalDate = new Date(festival.date);
                    const festivalEndDate = festival.endDate ? new Date(festival.endDate) : festivalDate;
                    return cellDate >= festivalDate && cellDate <= festivalEndDate;
                });
                
                const isToday = cellDate.toDateString() === new Date().toDateString();
                
                dayCell.className = `p-2 text-center cursor-pointer rounded-lg transition-colors ${
                    isToday ? 'bg-blue-600 text-white font-bold' : 
                    dayFestivals.length > 0 ? 'bg-orange-100 text-orange-800 font-semibold hover:bg-orange-200' : 
                    'hover:bg-gray-100'
                }`;
                
                dayCell.innerHTML = `
                    <div>${day}</div>
                    ${dayFestivals.length > 0 ? `<div class="text-xs mt-1">${dayFestivals[0].emoji}</div>` : ''}
                `;
                
                if (dayFestivals.length > 0) {
                    dayCell.onclick = () => showDayFestivals(dateString, dayFestivals);
                }
                
                calendarGrid.appendChild(dayCell);
            }
        }

        function changeMonth(direction) {
            const currentDate = APP.currentCalendarDate;
            currentDate.setMonth(currentDate.getMonth() + direction);
            renderCalendar();
        }

        function showDayFestivals(date, festivals) {
            const festivalNames = festivals.map(f => `${f.emoji} ${f.name}`).join('\n');
            alert(`Festivals on ${new Date(date).toLocaleDateString()}:\n\n${festivalNames}`);
        }

        function renderUpcomingEvents() {
            const today = new Date();
            const upcomingFestivals = APP.festivals
                .filter(festival => new Date(festival.date) >= today)
                .sort((a, b) => new Date(a.date) - new Date(b.date))
                .slice(0, 5);
            
            const upcomingEventsContainer = document.getElementById('upcomingEvents');
            upcomingEventsContainer.innerHTML = '';
            
            if (upcomingFestivals.length === 0) {
                upcomingEventsContainer.innerHTML = '<p class="text-gray-500">No upcoming events found.</p>';
                return;
            }
            
            upcomingFestivals.forEach(festival => {
                const eventCard = document.createElement('div');
                eventCard.className = 'flex items-center p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer';
                eventCard.onclick = () => showFestivalDetails(festival.id);
                
                const daysUntil = Math.ceil((new Date(festival.date) - today) / (1000 * 60 * 60 * 24));
                
                eventCard.innerHTML = `
                    <div class="text-3xl mr-4">${festival.emoji}</div>
                    <div class="flex-1">
                        <h3 class="font-semibold text-lg">${festival.name}</h3>
                        <p class="text-gray-600">${festival.description}</p>
                        <div class="flex items-center mt-2 text-sm text-gray-500">
                            <span class="mr-4">üìÖ ${new Date(festival.date).toLocaleDateString()}</span>
                            <span class="mr-4">üìç ${festival.location}</span>
                            <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded">${daysUntil} days</span>
                        </div>
                    </div>
                `;
                
                upcomingEventsContainer.appendChild(eventCard);
            });
        }

        function renderFestivalsList(filterCategory = 'all') {
            const festivalsContainer = document.getElementById('festivalsList');
            festivalsContainer.innerHTML = '';
            
            const filteredFestivals = filterCategory === 'all' ? 
                APP.festivals : 
                APP.festivals.filter(f => f.category === filterCategory);
            
            // Sort by date
            const sortedFestivals = filteredFestivals.sort((a, b) => new Date(a.date) - new Date(b.date));
            
            sortedFestivals.forEach(festival => {
                const festivalCard = document.createElement('div');
                festivalCard.className = 'border rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer';
                festivalCard.onclick = () => showFestivalDetails(festival.id);
                
                const isPast = new Date(festival.date) < new Date();
                const categoryColors = {
                    buddhist: 'bg-orange-100 text-orange-800',
                    cultural: 'bg-green-100 text-green-800',
                    seasonal: 'bg-purple-100 text-purple-800'
                };
                
                festivalCard.innerHTML = `
                    <div class="flex items-start justify-between">
                        <div class="flex items-start">
                            <div class="text-3xl mr-4">${festival.emoji}</div>
                            <div class="flex-1">
                                <div class="flex items-center mb-2">
                                    <h3 class="font-semibold text-lg mr-3">${festival.name}</h3>
                                    <span class="px-2 py-1 rounded text-xs ${categoryColors[festival.category]}">${festival.category}</span>
                                    ${isPast ? '<span class="px-2 py-1 rounded text-xs bg-gray-100 text-gray-600 ml-2">Past</span>' : ''}
                                </div>
                                <p class="text-gray-600 mb-2">${festival.description}</p>
                                <div class="flex flex-wrap gap-4 text-sm text-gray-500">
                                    <span>üìÖ ${new Date(festival.date).toLocaleDateString()}</span>
                                    ${festival.endDate ? `<span>üìÖ to ${new Date(festival.endDate).toLocaleDateString()}</span>` : ''}
                                    <span>üìç ${festival.location}</span>
                                </div>
                            </div>
                        </div>
                        <button class="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700 transition-colors">
                            Details
                        </button>
                    </div>
                `;
                
                festivalsContainer.appendChild(festivalCard);
            });
        }

        function filterFestivals(category) {
            renderFestivalsList(category);
            
            // Update active filter button
            document.querySelectorAll('#festivalsList').forEach(container => {
                const parent = container.parentElement;
                const buttons = parent.querySelectorAll('button');
                buttons.forEach(btn => {
                    btn.className = btn.className.replace(/bg-\w+-300/, 'hover:bg-gray-300');
                    if (btn.textContent.toLowerCase() === category || (category === 'all' && btn.textContent === 'All')) {
                        btn.className = btn.className.replace('bg-gray-200', 'bg-blue-200').replace('hover:bg-gray-300', 'bg-blue-300');
                    }
                });
            });
        }

        function showFestivalDetails(festivalId) {
            const festival = APP.festivals.find(f => f.id === festivalId);
            if (!festival) return;
            
            const activities = festival.activities ? festival.activities.join(', ') : 'Various cultural activities';
            const duration = festival.endDate ? 
                `${new Date(festival.date).toLocaleDateString()} - ${new Date(festival.endDate).toLocaleDateString()}` :
                new Date(festival.date).toLocaleDateString();
            
            const details = `
üéâ ${festival.name}

üìÖ Date: ${duration}
üìç Location: ${festival.location}
üè∑Ô∏è Category: ${festival.category.charAt(0).toUpperCase() + festival.category.slice(1)}

üìñ Description:
${festival.description}

‚ú® Significance:
${festival.significance}

üé≠ Activities:
${activities}

${new Date(festival.date) > new Date() ? '‚è∞ This is an upcoming event!' : 'üìö This event has passed.'}
            `;
            
            alert(details);
        }

        // Settings Functions
        function saveSettings() {
            APP.settings.primaryColor = document.getElementById('primaryColor').value;
            APP.settings.backgroundColor = document.getElementById('backgroundColor').value;
            APP.settings.policeNumber = document.getElementById('policeNumber').value.trim();
            APP.settings.ambulanceNumber = document.getElementById('ambulanceNumber').value.trim();
            
            // Apply theme changes
            document.documentElement.style.setProperty('--primary-color', APP.settings.primaryColor);
            document.documentElement.style.setProperty('--bg-color', APP.settings.backgroundColor);
            
            saveToStorage();
            alert('Settings saved successfully!');
        }

        // Developer Functions
        function showDeveloperLogin() {
            document.getElementById('developerLoginModal').classList.add('active');
        }

        function closeDeveloperLogin() {
            document.getElementById('developerLoginModal').classList.remove('active');
            document.getElementById('developerPassword').value = '';
        }

        function verifyDeveloperPassword() {
            const password = document.getElementById('developerPassword').value;
            if (password === '1qazmlp0') {
                closeDeveloperLogin();
                showPage('developer');
                renderDeveloperPlaces();
            } else {
                alert('Incorrect password!');
            }
        }

        function renderDeveloperPlaces() {
            const placesList = document.getElementById('placesList');
            if (!placesList) {
                console.error('Places list element not found');
                return;
            }
            
            placesList.innerHTML = '';
            
            APP.places.forEach(place => {
                const placeDiv = document.createElement('div');
                placeDiv.className = 'flex justify-between items-center p-4 border rounded-lg';
                placeDiv.innerHTML = `
                    <div>
                        <h3 class="font-semibold">${place.name}</h3>
                        <p class="text-gray-600 text-sm">${place.shortDescription}</p>
                        <p class="text-xs text-gray-400">ID: ${place.id}</p>
                    </div>
                    <div class="flex gap-2">
                        <button onclick="editPlace(${place.id})" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors">
                            Edit
                        </button>
                        <button onclick="deletePlace(${place.id})" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition-colors">
                            Delete
                        </button>
                        <button onclick="exportPlace(${place.id})" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition-colors">
                            Export
                        </button>
                    </div>
                `;
                placesList.appendChild(placeDiv);
            });
            
            console.log('Rendered', APP.places.length, 'places in developer panel');
        }

        function editPlace(placeId) {
            const place = APP.places.find(p => p.id === placeId);
            if (!place) {
                alert('Place not found!');
                return;
            }
            
            // Wait for modal to be available
            setTimeout(() => {
                // Clear any existing content first
                clearImagePreviews('edit');
                
                // Populate edit form with existing data
                document.getElementById('editPlaceId').value = place.id;
                document.getElementById('editPlaceName').value = place.name || '';
                document.getElementById('editPlaceSlug').value = place.slug || '';
                document.getElementById('editPlaceShortDesc').value = place.shortDescription || '';
                document.getElementById('editPlaceLongDesc').value = place.longDescription || '';
                document.getElementById('editPlaceAltitude').value = place.quickFacts?.Altitude || '';
                document.getElementById('editPlaceType').value = place.quickFacts?.Type || '';
                document.getElementById('editPlaceBestTime').value = place.quickFacts?.['Best Time'] || '';
                document.getElementById('editPlaceDistance').value = place.quickFacts?.['Distance from Gangtok'] || '';
                document.getElementById('editPlaceNarration').value = place.narrations?.en || '';
                document.getElementById('editPlaceShops').value = formatShopsForEdit(place.shops);
                
                // Show current cover image preview
                if (place.coverImage) {
                    const editCoverPreviewImg = document.getElementById('editCoverPreviewImg');
                    const editCoverPreview = document.getElementById('editCoverPreview');
                    if (editCoverPreviewImg && editCoverPreview) {
                        editCoverPreviewImg.src = place.coverImage;
                        editCoverPreview.style.display = 'block';
                    }
                }
                
                // Show current gallery images
                displayCurrentGallery(place.gallery);
                
                // Show edit modal
                document.getElementById('editPlaceModal').classList.add('active');
                
                // Set up file change listeners
                setupImageHandlers('edit');
            }, 200);
        }

        function deletePlace(placeId) {
            if (confirm('Are you sure you want to delete this place?')) {
                APP.places = APP.places.filter(p => p.id !== placeId);
                saveToStorage();
                renderDeveloperPlaces();
                renderPlaces();
            }
        }

        function exportPlace(placeId) {
            const place = APP.places.find(p => p.id === placeId);
            if (!place) return;
            
            const dataStr = JSON.stringify(place, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = `${place.slug}.json`;
            link.click();
            
            URL.revokeObjectURL(url);
        }

        // Developer Tab Functions
        function showDevTab(tabName) {
            console.log('Switching to dev tab:', tabName);
            
            // Hide all dev tabs
            document.querySelectorAll('.dev-tab').forEach(tab => tab.style.display = 'none');
            
            // Show selected tab
            const targetTab = document.getElementById(tabName + 'DevTab');
            if (targetTab) {
                targetTab.style.display = 'block';
                console.log('Showed tab:', tabName + 'DevTab');
            } else {
                console.error('Tab not found:', tabName + 'DevTab');
            }
            
            // Update tab buttons
            document.querySelectorAll('#placesTab, #configTab, #alertsTab, #analyticsTab').forEach(btn => {
                btn.className = 'flex-1 py-2 px-4 rounded-md text-gray-600 hover:text-gray-900';
            });
            const activeTabBtn = document.getElementById(tabName + 'Tab');
            if (activeTabBtn) {
                activeTabBtn.className = 'flex-1 py-2 px-4 rounded-md bg-white shadow text-blue-600 font-medium';
            }
            
            // Load tab-specific content
            if (tabName === 'places') {
                setTimeout(() => {
                    renderDeveloperPlaces();
                    console.log('Edit modal element exists:', !!document.getElementById('editPlaceModal'));
                }, 100);
            } else if (tabName === 'config') {
                loadAppConfig();
            } else if (tabName === 'analytics') {
                updateAnalytics();
            } else if (tabName === 'tripPlans') {
                loadTripPlannerConfig();
            }
        }

        // Add Place Functions
        function showAddPlaceForm() {
            document.getElementById('addPlaceModal').classList.add('active');
            setupImageHandlers('new');
        }

        function closeAddPlace() {
            document.getElementById('addPlaceModal').classList.remove('active');
            document.getElementById('addPlaceForm').reset();
            clearImagePreviews('new');
        }

        function closeEditPlace() {
            document.getElementById('editPlaceModal').classList.remove('active');
            document.getElementById('editPlaceForm').reset();
            clearImagePreviews('edit');
        }

        function setupImageHandlers(mode) {
            const prefix = mode === 'new' ? 'new' : 'edit';
            
            // Cover image file handler
            const coverFileInput = document.getElementById(prefix + 'PlaceCoverImageFile');
            if (coverFileInput) {
                coverFileInput.onchange = function(e) {
                    handleCoverImageUpload(e, prefix);
                };
            }
            
            // No URL handler needed anymore - only file uploads
            
            // Gallery files handler
            const galleryInput = document.getElementById(prefix + 'GalleryFiles');
            if (galleryInput) {
                galleryInput.onchange = function(e) {
                    handleGalleryUpload(e, prefix);
                };
            }
        }

        function handleCoverImageUpload(event, prefix) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById(prefix + 'CoverPreviewImg').src = e.target.result;
                document.getElementById(prefix + 'CoverPreview').style.display = 'block';
            };
            reader.readAsDataURL(file);
        }

        function handleGalleryUpload(event, prefix) {
            const files = event.target.files;
            if (!files.length) return;
            
            const preview = document.getElementById(prefix + 'GalleryPreview');
            preview.innerHTML = '';
            preview.style.display = 'block';
            
            Array.from(files).forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const div = document.createElement('div');
                    div.className = 'border rounded-lg p-4 bg-gray-50';
                    div.innerHTML = `
                        <div class="flex gap-4">
                            <img src="${e.target.result}" class="w-32 h-24 object-cover rounded border flex-shrink-0">
                            <div class="flex-1 space-y-2">
                                <div>
                                    <label class="block text-sm font-medium mb-1">Image Label</label>
                                    <input type="text" class="gallery-label w-full px-3 py-1 border rounded text-sm" 
                                           value="Gallery Image ${index + 1}" placeholder="Enter image label">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium mb-1">Story</label>
                                    <textarea class="gallery-story w-full px-3 py-2 border rounded text-sm" rows="3" 
                                              placeholder="Write a beautiful story about this image...">This captivating view showcases the natural beauty and cultural richness of this remarkable location in Sikkim, where ancient traditions meet breathtaking landscapes.</textarea>
                                </div>
                            </div>
                        </div>
                    `;
                    preview.appendChild(div);
                };
                reader.readAsDataURL(file);
            });
        }

        function clearImagePreviews(prefix) {
            const coverPreview = document.getElementById(prefix + 'CoverPreview');
            const galleryPreview = document.getElementById(prefix + 'GalleryPreview');
            
            if (coverPreview) coverPreview.style.display = 'none';
            if (galleryPreview) {
                galleryPreview.style.display = 'none';
                galleryPreview.innerHTML = '';
            }
        }

        function generateSlug(name) {
            return name.toLowerCase()
                .replace(/[^a-z0-9\s-]/g, '')
                .replace(/\s+/g, '-')
                .replace(/-+/g, '-')
                .trim('-');
        }

        function saveNewPlace() {
            const name = document.getElementById('newPlaceName').value.trim();
            const shortDesc = document.getElementById('newPlaceShortDesc').value.trim();
            const longDesc = document.getElementById('newPlaceLongDesc').value.trim();
            
            if (!name || !shortDesc || !longDesc) {
                alert('Please fill in all required fields (Name, Short Description, Long Description).');
                return;
            }
            
            const newPlace = {
                id: Date.now(),
                name: name,
                slug: document.getElementById('newPlaceSlug').value.trim() || generateSlug(name),
                shortDescription: shortDesc,
                longDescription: longDesc,
                coverImage: getCoverImageData('new'),
                quickFacts: {
                    "Altitude": document.getElementById('newPlaceAltitude').value.trim() || "Not specified",
                    "Type": document.getElementById('newPlaceType').value.trim() || "Tourist Destination",
                    "Best Time": document.getElementById('newPlaceBestTime').value.trim() || "Year round",
                    "Distance from Gangtok": document.getElementById('newPlaceDistance').value.trim() || "Contact local guide"
                },
                gallery: generateGalleryData('new'),
                narrations: {
                    en: document.getElementById('newPlaceNarration').value.trim() || `Welcome to ${name}`,
                    hi: `${name} ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à`,
                    ne: `${name} ‡§Æ‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§õ`
                },
                shops: parseShopsData(document.getElementById('newPlaceShops').value.trim()),
                qna: [
                    { question: "What is the best time to visit?", answer: document.getElementById('newPlaceBestTime').value.trim() || "Please check local conditions." },
                    { question: "How to reach this place?", answer: `${name} can be reached from Gangtok. Contact local guides for detailed directions.` }
                ],
                busStop: document.getElementById('newPlaceBusStop').value.trim() || "Not available",
                busTime: document.getElementById('newPlaceBusTime').value.trim() || "N/A",
                trainStop: document.getElementById('newPlaceTrainStop').value.trim() || "Not available",
                trainTime: document.getElementById('newPlaceTrainTime').value.trim() || "N/A",

            };
            
            APP.places.push(newPlace);
            saveToStorage();
            renderDeveloperPlaces();
            renderPlaces();
            closeAddPlace();
            
            alert('New place added successfully!');
        }

        function saveEditPlace() {
            const placeId = parseInt(document.getElementById('editPlaceId').value);
            const place = APP.places.find(p => p.id === placeId);
            if (!place) return;
            
            const name = document.getElementById('editPlaceName').value.trim();
            const shortDesc = document.getElementById('editPlaceShortDesc').value.trim();
            const longDesc = document.getElementById('editPlaceLongDesc').value.trim();
            
            if (!name || !shortDesc || !longDesc) {
                alert('Please fill in all required fields.');
                return;
            }
            
            // Update place data
            place.name = name;
            place.slug = document.getElementById('editPlaceSlug').value.trim() || generateSlug(name);
            place.shortDescription = shortDesc;
            place.longDescription = longDesc;
            
            // Handle cover image update
            const coverFileInput = document.getElementById('editPlaceCoverImageFile');
            const coverPreviewImg = document.getElementById('editCoverPreviewImg');
            
            if (coverFileInput && coverFileInput.files.length > 0 && coverPreviewImg) {
                // New file uploaded - use the base64 data
                place.coverImage = coverPreviewImg.src;
            }
            
            place.quickFacts = {
                "Altitude": document.getElementById('editPlaceAltitude').value.trim() || place.quickFacts?.Altitude || "Not specified",
                "Type": document.getElementById('editPlaceType').value.trim() || place.quickFacts?.Type || "Tourist Destination",
                "Best Time": document.getElementById('editPlaceBestTime').value.trim() || place.quickFacts?.['Best Time'] || "Year round",
                "Distance from Gangtok": document.getElementById('editPlaceDistance').value.trim() || place.quickFacts?.['Distance from Gangtok'] || "Contact local guide"
            };
            
            // Handle gallery update with stories
            const galleryData = collectGalleryWithStories('edit');
            if (galleryData.length > 0) {
                place.gallery = galleryData;
            }
            
            // Update narrations
            const newNarration = document.getElementById('editPlaceNarration').value.trim();
            if (newNarration) {
                place.narrations = place.narrations || {};
                place.narrations.en = newNarration;
            }
            
            // Update shops
            const shopsText = document.getElementById('editPlaceShops').value.trim();
            if (shopsText) {
                place.shops = parseShopsData(shopsText);
            }
            
            // Update Q&A with new information
            place.qna = [
                { question: "What is the best time to visit?", answer: place.quickFacts['Best Time'] || "Please check local conditions." },
                { question: "How to reach this place?", answer: `${place.name} can be reached from Gangtok. Distance: ${place.quickFacts['Distance from Gangtok'] || 'Contact local guides for directions'}.` },
                { question: "What is the altitude?", answer: `${place.name} is located at ${place.quickFacts.Altitude || 'varying altitudes'}.` }
            ];
            
            // Save to storage
            
            // Update transport fields
            place.busStop = document.getElementById('editPlaceBusStop').value.trim() || "Not available";
            place.busTime = document.getElementById('editPlaceBusTime').value.trim() || "N/A";
            place.trainStop = document.getElementById('editPlaceTrainStop').value.trim() || "Not available";
            place.trainTime = document.getElementById('editPlaceTrainTime').value.trim() || "N/A";
saveToStorage();
            
            // Refresh displays
            renderPlaces();
            renderDeveloperPlaces();
            
            // If currently viewing this place, update the modal
            if (APP.currentPlace && APP.currentPlace.id === placeId) {
                APP.currentPlace = place;
            }
            
            closeEditPlace();
            alert('Place updated successfully! All changes are now visible.');
        }

        function getCoverImageData(prefix) {
            const fileInput = document.getElementById(prefix + 'PlaceCoverImageFile');
            const previewImg = document.getElementById(prefix + 'CoverPreviewImg');
            
            if (fileInput && fileInput.files.length > 0) {
                return previewImg.src; // Base64 data from file
            }
            
            // Return default SVG if no image provided
            return "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 400 300'%3E%3Crect width='400' height='300' fill='%234facfe'/%3E%3Ctext x='200' y='150' text-anchor='middle' fill='white' font-size='24'%3ESikkim%3C/text%3E%3C/svg%3E";
        }

        function generateGalleryData(prefix) {
            const galleryPreview = document.getElementById(prefix + 'GalleryPreview');
            const gallery = [];
            
            if (galleryPreview && galleryPreview.children.length > 0) {
                Array.from(galleryPreview.children).forEach((child, index) => {
                    const img = child.querySelector('img');
                    const labelInput = child.querySelector('.gallery-label');
                    const storyInput = child.querySelector('.gallery-story');
                    
                    if (img) {
                        gallery.push({
                            image: img.src,
                            label: labelInput ? labelInput.value.trim() : `Gallery Image ${index + 1}`,
                            story: storyInput ? storyInput.value.trim() : `This beautiful view showcases the natural beauty and cultural richness of this location in Sikkim.`
                        });
                    }
                });
            }
            
            // If no gallery images, provide default ones with rich stories
            if (gallery.length === 0) {
                gallery.push(
                    {
                        image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%234facfe'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='14'%3EMain View%3C/text%3E%3C/svg%3E",
                        label: "Main View",
                        story: "As the morning mist clears from the sacred peaks, this breathtaking vista reveals itself like a hidden treasure. Ancient legends speak of this place as a gateway between earth and sky, where pilgrims have journeyed for centuries seeking spiritual enlightenment."
                    },
                    {
                        image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%23228B22'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='14'%3ESurroundings%3C/text%3E%3C/svg%3E",
                        label: "Sacred Surroundings",
                        story: "The surrounding landscape whispers tales of ancient monasteries and forgotten trails. Prayer flags flutter in the mountain breeze, carrying hopes and dreams to the heavens above, while rhododendrons bloom in vibrant colors that paint the hillsides."
                    },
                    {
                        image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%23FF6B6B'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='14'%3ECultural%3C/text%3E%3C/svg%3E",
                        label: "Cultural Heritage",
                        story: "Here, time seems to stand still as traditional architecture blends harmoniously with nature. Local artisans have passed down their crafts through generations, creating intricate works that tell stories of devotion, celebration, and the eternal bond between humanity and the mountains."
                    },
                    {
                        image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%23FFD93D'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='14'%3ESunrise%3C/text%3E%3C/svg%3E",
                        label: "Golden Hour",
                        story: "At dawn, golden light cascades across the landscape like liquid honey, transforming ordinary moments into magical memories. This is when the mountains reveal their true majesty, and visitors often find themselves moved to tears by the sheer beauty of creation."
                    },
                    {
                        image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'%3E%3Crect width='200' height='150' fill='%239B59B6'/%3E%3Ctext x='100' y='75' text-anchor='middle' fill='white' font-size='14'%3EMystic%3C/text%3E%3C/svg%3E",
                        label: "Mystical Evening",
                        story: "As twilight descends, the place transforms into a realm of mystery and wonder. Shadows dance across ancient stones while the evening star appears, and locals say that on clear nights, you can hear the mountain spirits singing their eternal songs of peace and protection."
                    }
                );
            }
            
            return gallery;
        }

        function collectGalleryWithStories(prefix) {
            const gallery = [];
            
            // Collect from new uploads
            const galleryPreview = document.getElementById(prefix + 'GalleryPreview');
            if (galleryPreview && galleryPreview.children.length > 0) {
                Array.from(galleryPreview.children).forEach((child) => {
                    const img = child.querySelector('img');
                    const labelInput = child.querySelector('.gallery-label');
                    const storyInput = child.querySelector('.gallery-story');
                    
                    if (img) {
                        gallery.push({
                            image: img.src,
                            label: labelInput ? labelInput.value.trim() : 'Gallery Image',
                            story: storyInput ? storyInput.value.trim() : 'A beautiful view of this location.'
                        });
                    }
                });
            }
            
            // Collect from existing gallery edits
            const currentGallery = document.getElementById(prefix + 'CurrentGallery');
            if (currentGallery && currentGallery.children.length > 0) {
                Array.from(currentGallery.children).forEach((child) => {
                    const img = child.querySelector('img');
                    const labelInput = child.querySelector('.existing-gallery-label');
                    const storyInput = child.querySelector('.existing-gallery-story');
                    
                    if (img) {
                        gallery.push({
                            image: img.src,
                            label: labelInput ? labelInput.value.trim() : 'Gallery Image',
                            story: storyInput ? storyInput.value.trim() : 'A beautiful view of this location.'
                        });
                    }
                });
            }
            
            return gallery;
        }

        function parseShopsData(shopsText) {
            if (!shopsText) return [];
            
            const shops = [];
            const lines = shopsText.split('\n').filter(line => line.trim());
            
            lines.forEach(line => {
                const parts = line.split('|').map(part => part.trim());
                if (parts.length >= 2) {
                    shops.push({
                        name: parts[0],
                        type: parts[1],
                        contact: parts[2] || 'Contact locally'
                    });
                }
            });
            
            return shops.length > 0 ? shops : [
                { name: "Local Shop", type: "General Store", contact: "Contact locally" },
                { name: "Tea Stall", type: "Refreshments", contact: "Contact locally" }
            ];
        }

        function formatShopsForEdit(shops) {
            if (!shops || shops.length === 0) return '';
            return shops.map(shop => `${shop.name} | ${shop.type} | ${shop.contact}`).join('\n');
        }

        function displayCurrentGallery(gallery) {
            const currentGallery = document.getElementById('editCurrentGallery');
            if (!currentGallery || !gallery) return;
            
            currentGallery.innerHTML = '';
            gallery.forEach((item, index) => {
                const div = document.createElement('div');
                div.className = 'border rounded-lg p-4 bg-white';
                div.innerHTML = `
                    <div class="flex gap-4">
                        <img src="${item.image}" class="w-32 h-24 object-cover rounded border flex-shrink-0">
                        <div class="flex-1 space-y-2">
                            <div>
                                <label class="block text-sm font-medium mb-1">Image Label</label>
                                <input type="text" class="existing-gallery-label w-full px-3 py-1 border rounded text-sm" 
                                       value="${item.label || `Gallery Image ${index + 1}`}" placeholder="Enter image label">
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-1">Story</label>
                                <textarea class="existing-gallery-story w-full px-3 py-2 border rounded text-sm" rows="3" 
                                          placeholder="Write a beautiful story about this image...">${item.story || 'This captivating view showcases the natural beauty and cultural richness of this remarkable location in Sikkim.'}</textarea>
                            </div>
                        </div>
                        <div class="flex flex-col gap-2">
                            <button type="button" onclick="removeGalleryItem(this)" class="bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600">
                                Remove
                            </button>
                        </div>
                    </div>
                `;
                currentGallery.appendChild(div);
            });
        }

        function removeGalleryItem(button) {
            if (confirm('Remove this gallery item?')) {
                button.closest('.border').remove();
            }
        }

        // App Configuration Functions
        function loadAppConfig() {
            document.getElementById('configAppName').value = APP.appConfig.appName;
            document.getElementById('configTagline').value = APP.appConfig.tagline;
            document.getElementById('configWelcome').value = APP.appConfig.welcomeMessage;
            document.getElementById('configEmergencyHelpline').value = APP.appConfig.emergencyHelpline;
            document.getElementById('configTouristHelpline').value = APP.appConfig.touristHelpline;
            document.getElementById('configWeatherAlerts').checked = APP.appConfig.enableWeatherAlerts;
            document.getElementById('configRoadUpdates').checked = APP.appConfig.enableRoadUpdates;
            document.getElementById('configOfflineMode').checked = APP.appConfig.enableOfflineMode;
        }

        function saveAppConfig() {
            APP.appConfig.appName = document.getElementById('configAppName').value.trim();
            APP.appConfig.tagline = document.getElementById('configTagline').value.trim();
            APP.appConfig.welcomeMessage = document.getElementById('configWelcome').value.trim();
            APP.appConfig.emergencyHelpline = document.getElementById('configEmergencyHelpline').value.trim();
            APP.appConfig.touristHelpline = document.getElementById('configTouristHelpline').value.trim();
            APP.appConfig.enableWeatherAlerts = document.getElementById('configWeatherAlerts').checked;
            APP.appConfig.enableRoadUpdates = document.getElementById('configRoadUpdates').checked;
            APP.appConfig.enableOfflineMode = document.getElementById('configOfflineMode').checked;
            
            updateAppUI();
            saveToStorage();
            alert('App configuration saved successfully!');
        }

        function resetAppConfig() {
            if (confirm('Reset all app configuration to defaults?')) {
                APP.appConfig = {
                    appName: "Tour Buddy",
                    tagline: "Your Smart Heritage Guide to Sikkim",
                    welcomeMessage: "Discover the mystical beauty of the Himalayas",
                    emergencyHelpline: "1091",
                    touristHelpline: "1363",
                    enableWeatherAlerts: true,
                    enableRoadUpdates: true,
                    enableOfflineMode: true
                };
                loadAppConfig();
                updateAppUI();
                saveToStorage();
                alert('Configuration reset to defaults!');
            }
        }

        function updateAppUI() {
            document.getElementById('appTitle').textContent = APP.appConfig.appName;
            document.getElementById('appTagline').textContent = APP.appConfig.tagline;
        }

        // Live Data Functions
        function initializeLiveData() {
            // Initialize with sample data
            APP.liveData = {
                weather: "Partly cloudy, 15¬∞C",
                roadBlocks: [],
                lastUpdated: new Date().toISOString()
            };
            
            // Show initial weather and road info
            showLiveAlert('weather', 'Current weather: Partly cloudy, 15¬∞C. Perfect for sightseeing!');
            showLiveAlert('road', 'All major roads are clear. Safe travels ahead!');
        }

        function autoUpdateLiveData() {
            // Simulate live data updates
            const weatherConditions = [
                "Clear skies, 18¬∞C",
                "Partly cloudy, 15¬∞C", 
                "Light rain, 12¬∞C",
                "Foggy conditions, 10¬∞C",
                "Sunny, 20¬∞C"
            ];
            
            APP.liveData.weather = weatherConditions[Math.floor(Math.random() * weatherConditions.length)];
            APP.liveData.lastUpdated = new Date().toISOString();
            
            // Randomly show weather alerts
            if (Math.random() < 0.3) {
                showLiveAlert('weather', `Current weather: ${APP.liveData.weather}. Plan your travel accordingly.`);
            }
        }

        function showLiveAlert(type, message) {
            const alertElement = document.getElementById(type + 'Alert');
            const infoElement = document.getElementById(type + 'Info');
            
            if (alertElement && infoElement) {
                infoElement.textContent = message;
                alertElement.style.display = 'block';
            }
        }

        function dismissAlert(type) {
            const alertElement = document.getElementById(type + 'Alert');
            if (alertElement) {
                alertElement.style.display = 'none';
            }
        }

        // Alert Management Functions
        function updateWeatherAlert() {
            const alertText = document.getElementById('weatherAlertText').value.trim();
            if (alertText) {
                showLiveAlert('weather', alertText);
                addSystemLog(`Weather alert updated: ${alertText}`);
            }
        }

        function updateRoadAlert() {
            const alertText = document.getElementById('roadAlertText').value.trim();
            if (alertText) {
                showLiveAlert('road', alertText);
                addSystemLog(`Road alert updated: ${alertText}`);
            }
        }

        function updateEmergencyAlert() {
            const alertText = document.getElementById('emergencyAlertText').value.trim();
            if (alertText) {
                showLiveAlert('emergency', alertText);
                addSystemLog(`Emergency alert updated: ${alertText}`);
            }
        }

        function updateAdvisoryAlert() {
            const alertText = document.getElementById('advisoryAlertText').value.trim();
            if (alertText) {
                showLiveAlert('advisory', alertText);
                addSystemLog(`Advisory updated: ${alertText}`);
            }
        }

        function clearAllAlerts() {
            ['weather', 'road', 'emergency', 'advisory', 'emergencyBroadcast'].forEach(type => {
                dismissAlert(type);
            });
            addSystemLog('All alerts cleared');
        }

        // Emergency Broadcast Functions
        function sendEmergencyBroadcast() {
            const broadcastType = document.getElementById('broadcastType').value;
            const broadcastMessage = document.getElementById('broadcastMessage').value.trim();
            
            if (!broadcastType || !broadcastMessage) {
                alert('Please select broadcast type and enter emergency message.');
                return;
            }
            
            const timestamp = new Date().toLocaleString();
            
            // Show emergency broadcast on home screen
            const broadcastElement = document.getElementById('emergencyBroadcast');
            const broadcastInfo = document.getElementById('emergencyBroadcastInfo');
            const broadcastTime = document.getElementById('emergencyBroadcastTime');
            
            if (broadcastElement && broadcastInfo && broadcastTime) {
                broadcastInfo.textContent = broadcastMessage;
                broadcastTime.textContent = timestamp;
                broadcastElement.style.display = 'block';
                
                // Play emergency sound alert
                playEmergencySound();
                
                // Auto-scroll to top to ensure visibility
                window.scrollTo({ top: 0, behavior: 'smooth' });
                
                // Store broadcast in app state
                APP.currentEmergencyBroadcast = {
                    type: broadcastType,
                    message: broadcastMessage,
                    timestamp: timestamp,
                    active: true
                };
                
                saveToStorage();
                addSystemLog(`Emergency broadcast sent: ${broadcastType} - ${broadcastMessage}`);
                
                alert(`Emergency broadcast sent successfully!\n\nType: ${broadcastType}\nMessage: ${broadcastMessage}\n\nAll tourists will see this alert prominently on their home screen.`);
            }
        }

        function clearEmergencyBroadcast() {
            const broadcastElement = document.getElementById('emergencyBroadcast');
            if (broadcastElement) {
                broadcastElement.style.display = 'none';
            }
            
            // Clear from app state
            APP.currentEmergencyBroadcast = null;
            
            // Clear form fields
            document.getElementById('broadcastType').value = '';
            document.getElementById('broadcastMessage').value = '';
            
            saveToStorage();
            addSystemLog('Emergency broadcast cleared');
            
            alert('Emergency broadcast cleared from all tourist screens.');
        }

        function playEmergencySound() {
            // Create emergency alert sound using Web Audio API
            try {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                
                // Create emergency siren sound
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.5);
                oscillator.frequency.exponentialRampToValueAtTime(800, audioContext.currentTime + 1);
                
                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 1);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 1);
                
                // Repeat 3 times
                setTimeout(() => {
                    const oscillator2 = audioContext.createOscillator();
                    const gainNode2 = audioContext.createGain();
                    oscillator2.connect(gainNode2);
                    gainNode2.connect(audioContext.destination);
                    oscillator2.frequency.setValueAtTime(800, audioContext.currentTime);
                    oscillator2.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.5);
                    gainNode2.gain.setValueAtTime(0.3, audioContext.currentTime);
                    gainNode2.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
                    oscillator2.start();
                    oscillator2.stop(audioContext.currentTime + 0.5);
                }, 1200);
                
                setTimeout(() => {
                    const oscillator3 = audioContext.createOscillator();
                    const gainNode3 = audioContext.createGain();
                    oscillator3.connect(gainNode3);
                    gainNode3.connect(audioContext.destination);
                    oscillator3.frequency.setValueAtTime(800, audioContext.currentTime);
                    oscillator3.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.5);
                    gainNode3.gain.setValueAtTime(0.3, audioContext.currentTime);
                    gainNode3.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
                    oscillator3.start();
                    oscillator3.stop(audioContext.currentTime + 0.5);
                }, 2400);
                
            } catch (error) {
                console.log('Audio not available:', error);
            }
        }

        function checkEmergencyBroadcast() {
            // Check if there's an active emergency broadcast on page load
            if (APP.currentEmergencyBroadcast && APP.currentEmergencyBroadcast.active) {
                const broadcastElement = document.getElementById('emergencyBroadcast');
                const broadcastInfo = document.getElementById('emergencyBroadcastInfo');
                const broadcastTime = document.getElementById('emergencyBroadcastTime');
                
                if (broadcastElement && broadcastInfo && broadcastTime) {
                    broadcastInfo.textContent = APP.currentEmergencyBroadcast.message;
                    broadcastTime.textContent = APP.currentEmergencyBroadcast.timestamp;
                    broadcastElement.style.display = 'block';
                    
                    // Auto-scroll to top to ensure visibility
                    setTimeout(() => {
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                    }, 500);
                }
            }
        }

        function fetchLiveWeather() {
            addSystemLog('Fetching live weather data...');
            // Simulate API call
            setTimeout(() => {
                const weather = "Live: Partly cloudy, 16¬∞C, Humidity 65%";
                document.getElementById('currentWeather').value = weather;
                addSystemLog('Live weather data updated');
            }, 1000);
        }

        function fetchRoadConditions() {
            addSystemLog('Checking road conditions...');
            // Simulate API call
            setTimeout(() => {
                const roadStatus = "All major roads clear. Minor delays on NH-10 due to construction.";
                document.getElementById('roadAlertText').value = roadStatus;
                addSystemLog('Road conditions updated');
            }, 1000);
        }

        // Analytics Functions
        function updateAnalytics() {
            document.getElementById('totalUsers').textContent = APP.currentUser ? '1' : '0';
            document.getElementById('totalPlaces').textContent = APP.places.length.toString();
            document.getElementById('totalSOS').textContent = APP.sosLogs.length.toString();
            
            renderSOSLogs();
        }

        function renderSOSLogs() {
            const sosLogsList = document.getElementById('sosLogsList');
            sosLogsList.innerHTML = '';
            
            if (APP.sosLogs.length === 0) {
                sosLogsList.innerHTML = '<p class="text-gray-500">No SOS alerts recorded.</p>';
                return;
            }
            
            APP.sosLogs.forEach(log => {
                const logDiv = document.createElement('div');
                logDiv.className = 'p-3 bg-red-50 border-l-4 border-red-400 rounded';
                logDiv.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div>
                            <div class="font-semibold text-red-800">SOS Alert</div>
                            <div class="text-sm text-red-600">${new Date(log.timestamp).toLocaleString()}</div>
                            <div class="text-sm text-gray-600">Contacts notified: ${log.contacts}</div>
                        </div>
                        <div class="text-red-600">üö®</div>
                    </div>
                `;
                sosLogsList.appendChild(logDiv);
            });
        }

        function addSystemLog(message) {
            const systemLogs = document.getElementById('systemLogs');
            if (systemLogs) {
                const timestamp = new Date().toLocaleTimeString();
                const logEntry = document.createElement('div');
                logEntry.textContent = `[${timestamp}] ${message}`;
                systemLogs.appendChild(logEntry);
                systemLogs.scrollTop = systemLogs.scrollHeight;
            }
        }

        function clearLogs() {
            const systemLogs = document.getElementById('systemLogs');
            if (systemLogs) {
                systemLogs.innerHTML = '<div>[INFO] Logs cleared</div>';
            }
        }

        function exportLogs() {
            const systemLogs = document.getElementById('systemLogs');
            if (systemLogs) {
                const logs = systemLogs.textContent;
                const dataBlob = new Blob([logs], {type: 'text/plain'});
                const url = URL.createObjectURL(dataBlob);
                
                const link = document.createElement('a');
                link.href = url;
                link.download = `tour-buddy-logs-${new Date().toISOString().split('T')[0]}.txt`;
                link.click();
                
                URL.revokeObjectURL(url);
            }
        }

        // Utility Functions
        function showLocalShops() {
            if (!APP.currentPlace || !APP.currentPlace.shops) {
                alert('No local shops information available for this location.');
                return;
            }
            
            const shops = APP.currentPlace.shops;
            const shopsList = shops.map(shop => `${shop.name} (${shop.type}) - ${shop.contact}`).join('\n');
            alert(`Local Shops near ${APP.currentPlace.name}:\n\n${shopsList}`);
        }

        function downloadPackage() {
            if (!APP.currentPlace) return;
            
            alert(`Downloading offline package for ${APP.currentPlace.name}...\n\nThis would include:\n- High-resolution images\n- Audio narrations in multiple languages\n- Detailed maps\n- Cultural information\n- Emergency contacts`);
        }

        function downloadOfflinePackage(placeId) {
            const place = APP.places.find(p => p.id === placeId);
            if (!place) return;
            
            alert(`Downloading offline package for ${place.name}...\n\nPackage includes:\n- Images and gallery\n- Audio narrations\n- Cultural stories\n- Local information\n- Emergency contacts`);
        }

        // Trip Planner Functions
        function initializeTripPlanner() {
            renderSampleTripPlans();
        }

        function generateTripPlan() {
            const budget = document.getElementById('tripBudget').value;
            const duration = document.getElementById('tripDuration').value;
            const style = document.getElementById('tripStyle').value;
            const groupSize = document.getElementById('groupSize').value;
            const season = document.getElementById('tripSeason').value;
            const startingPoint = document.getElementById('startingPoint').value;
            
            if (!budget || !duration || !style) {
                alert('Please fill in at least Budget, Duration, and Travel Style to generate a trip plan.');
                return;
            }
            
            // Get special interests
            const interests = Array.from(document.querySelectorAll('input[type="checkbox"]:checked')).map(cb => cb.value);
            const additionalReq = document.getElementById('additionalRequirements').value.trim();
            
            // Generate AI trip plan based on inputs
            const tripPlan = createTripPlan(budget, duration, style, groupSize, season, startingPoint, interests, additionalReq);
            
            // Display the generated plan
            document.getElementById('tripPlanContent').innerHTML = tripPlan;
            document.getElementById('generatedTripPlan').style.display = 'block';
            
            // Scroll to the generated plan
            document.getElementById('generatedTripPlan').scrollIntoView({ behavior: 'smooth' });
        }

        function createTripPlan(budget, duration, style, groupSize, season, startingPoint, interests, additionalReq) {
            const budgetInfo = APP.tripPlanner.budgetRecommendations[budget] || APP.tripPlanner.budgetRecommendations.mid;
            const durationDays = duration === '2-3' ? 3 : duration === '4-5' ? 5 : duration === '6-7' ? 7 : 10;
            
            // Create itinerary based on style and interests
            const itinerary = generateItinerary(durationDays, style, interests, startingPoint);
            
            // Calculate estimated costs
            const costs = calculateTripCosts(budget, durationDays, groupSize);
            
            return `
                <div class="space-y-8">
                    <!-- Trip Overview -->
                    <div class="bg-gradient-to-r from-blue-50 to-purple-50 p-6 rounded-lg">
                        <h3 class="text-xl font-bold mb-4">üéØ Trip Overview</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-blue-600">${durationDays} Days</div>
                                <div class="text-sm text-gray-600">Duration</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-green-600">${costs.total}</div>
                                <div class="text-sm text-gray-600">Est. Total Cost</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-purple-600">${style.charAt(0).toUpperCase() + style.slice(1)}</div>
                                <div class="text-sm text-gray-600">Travel Style</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-orange-600">${groupSize || 'Flexible'}</div>
                                <div class="text-sm text-gray-600">Group Size</div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Day-wise Itinerary -->
                    <div>
                        <h3 class="text-xl font-bold mb-4">üìÖ Day-wise Itinerary</h3>
                        <div class="space-y-4">
                            ${itinerary}
                        </div>
                    </div>
                    
                    <!-- Budget Breakdown -->
                    <div>
                        <h3 class="text-xl font-bold mb-4">üí∞ Budget Breakdown</h3>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                            <div class="bg-green-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-green-800 mb-2">üè® Accommodation</h4>
                                <div class="text-sm text-green-700 whitespace-pre-line">${budgetInfo.accommodation}</div>
                                <div class="mt-2 font-semibold text-green-800">Est: ${costs.accommodation}</div>
                            </div>
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-blue-800 mb-2">üöó Transportation</h4>
                                <div class="text-sm text-blue-700 whitespace-pre-line">${budgetInfo.transport}</div>
                                <div class="mt-2 font-semibold text-blue-800">Est: ${costs.transport}</div>
                            </div>
                            <div class="bg-orange-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-orange-800 mb-2">üçΩÔ∏è Food & Dining</h4>
                                <div class="text-sm text-orange-700 whitespace-pre-line">${budgetInfo.food}</div>
                                <div class="mt-2 font-semibold text-orange-800">Est: ${costs.food}</div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Special Recommendations -->
                    ${interests.length > 0 ? `
                    <div>
                        <h3 class="text-xl font-bold mb-4">‚≠ê Special Recommendations</h3>
                        <div class="bg-yellow-50 p-4 rounded-lg">
                            <div class="text-sm text-yellow-800">
                                Based on your interests in <strong>${interests.join(', ')}</strong>, we recommend:
                                ${generateSpecialRecommendations(interests)}
                            </div>
                        </div>
                    </div>
                    ` : ''}
                    
                    <!-- Important Notes -->
                    <div>
                        <h3 class="text-xl font-bold mb-4">üìã Important Notes</h3>
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <ul class="text-sm text-gray-700 space-y-2">
                                <li>‚Ä¢ Permits required for certain areas like Nathula Pass and restricted zones</li>
                                <li>‚Ä¢ Weather can change quickly in mountains - pack layers</li>
                                <li>‚Ä¢ Book accommodations in advance during peak season (Mar-Jun, Oct-Dec)</li>
                                <li>‚Ä¢ Carry valid ID proof and emergency contact numbers</li>
                                <li>‚Ä¢ Respect local customs and environmental guidelines</li>
                                ${season ? `<li>‚Ä¢ ${getSeasonalTips(season)}</li>` : ''}
                                ${additionalReq ? `<li>‚Ä¢ Special note: ${additionalReq}</li>` : ''}
                            </ul>
                        </div>
                    </div>
                </div>
            `;
        }

        function generateItinerary(days, style, interests, startingPoint) {
            const itineraryTemplates = {
                adventure: [
                    { day: 1, title: "Arrival & Acclimatization", activities: "Arrive in Gangtok, check-in, local sightseeing, MG Marg walk" },
                    { day: 2, title: "Tsomgo Lake & Baba Mandir", activities: "Early morning trip to Tsomgo Lake, visit Baba Mandir, return to Gangtok" },
                    { day: 3, title: "Nathula Pass Adventure", activities: "Visit Nathula Pass (Indo-China border), high altitude experience" },
                    { day: 4, title: "Trekking Day", activities: "Trek to nearby viewpoints, nature walks, adventure activities" },
                    { day: 5, title: "Pelling Exploration", activities: "Travel to Pelling, visit Pemayangtse Monastery, Kanchenjunga views" },
                    { day: 6, title: "Yuksom & Heritage", activities: "Visit Yuksom (first capital), historical sites, trekking base" },
                    { day: 7, title: "Return Journey", activities: "Final shopping, departure preparations, journey back" }
                ],
                cultural: [
                    { day: 1, title: "Gangtok Cultural Immersion", activities: "Arrival, Rumtek Monastery, Enchey Monastery, local culture" },
                    { day: 2, title: "Heritage & Handicrafts", activities: "Institute of Tibetology, Handicraft Center, local markets" },
                    { day: 3, title: "Pelling Monasteries", activities: "Travel to Pelling, Pemayangtse Monastery, Sangachoeling Monastery" },
                    { day: 4, title: "Traditional Villages", activities: "Visit traditional villages, interact with locals, cultural programs" },
                    { day: 5, title: "Festivals & Traditions", activities: "Local festivals (if available), traditional food, cultural shows" },
                    { day: 6, title: "Art & Craft", activities: "Traditional art workshops, local craft centers, souvenir shopping" },
                    { day: 7, title: "Farewell", activities: "Final cultural experiences, departure" }
                ],
                relaxed: [
                    { day: 1, title: "Gentle Arrival", activities: "Comfortable arrival, hotel check-in, leisurely MG Marg stroll" },
                    { day: 2, title: "Scenic Beauty", activities: "Tsomgo Lake visit, photography, peaceful moments" },
                    { day: 3, title: "Monastery Peace", activities: "Rumtek Monastery, meditation, spiritual experience" },
                    { day: 4, title: "Mountain Views", activities: "Travel to Pelling, Kanchenjunga views, relaxation" },
                    { day: 5, title: "Nature & Wellness", activities: "Garden visits, spa treatments, nature walks" },
                    { day: 6, title: "Local Experiences", activities: "Tea gardens, local cuisine, cultural interactions" },
                    { day: 7, title: "Peaceful Departure", activities: "Final relaxation, shopping, comfortable departure" }
                ],
                spiritual: [
                    { day: 1, title: "Sacred Arrival", activities: "Arrival, visit Ganesh Tok, evening prayers" },
                    { day: 2, title: "Rumtek Monastery", activities: "Full day at Rumtek, meditation, spiritual teachings" },
                    { day: 3, title: "Sacred Lakes", activities: "Tsomgo Lake pilgrimage, spiritual significance" },
                    { day: 4, title: "Ancient Monasteries", activities: "Enchey Monastery, Pemayangtse Monastery visits" },
                    { day: 5, title: "Meditation Retreat", activities: "Meditation sessions, spiritual discussions, inner peace" },
                    { day: 6, title: "Sacred Sites", activities: "Visit sacred caves, holy sites, blessing ceremonies" },
                    { day: 7, title: "Spiritual Completion", activities: "Final prayers, spiritual shopping, blessed departure" }
                ],
                family: [
                    { day: 1, title: "Family Welcome", activities: "Comfortable arrival, family-friendly hotel, easy sightseeing" },
                    { day: 2, title: "Fun & Learning", activities: "Tsomgo Lake, educational visits, family photos" },
                    { day: 3, title: "Cultural Learning", activities: "Monasteries with kids, cultural shows, interactive experiences" },
                    { day: 4, title: "Adventure for All", activities: "Cable car rides, easy treks, family activities" },
                    { day: 5, title: "Nature & Wildlife", activities: "Zoo visits, flower gardens, nature education" },
                    { day: 6, title: "Shopping & Crafts", activities: "Family shopping, craft workshops, souvenir hunting" },
                    { day: 7, title: "Happy Memories", activities: "Final family time, photo sessions, departure" }
                ]
            };

            const template = itineraryTemplates[style] || itineraryTemplates.relaxed;
            const selectedDays = template.slice(0, days);

            return selectedDays.map(day => `
                <div class="border-l-4 border-blue-500 pl-4 py-3 bg-white rounded-r-lg shadow-sm">
                    <div class="flex items-center mb-2">
                        <div class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3">
                            ${day.day}
                        </div>
                        <h4 class="font-semibold text-lg">${day.title}</h4>
                    </div>
                    <p class="text-gray-600 ml-11">${day.activities}</p>
                </div>
            `).join('');
        }

        function calculateTripCosts(budget, days, groupSize) {
            const groupMultiplier = groupSize === 'solo' ? 1 : groupSize === 'couple' ? 2 : groupSize === 'small' ? 4 : 6;
            
            const baseCosts = {
                budget: { accommodation: 1000, transport: 2000, food: 300, activities: 500 },
                mid: { accommodation: 3500, transport: 4500, food: 600, activities: 1000 },
                luxury: { accommodation: 12000, transport: 9000, food: 2000, activities: 2500 }
            };
            
            const costs = baseCosts[budget] || baseCosts.mid;
            
            return {
                accommodation: `‚Çπ${(costs.accommodation * days).toLocaleString()}`,
                transport: `‚Çπ${(costs.transport * days * 0.7).toLocaleString()}`,
                food: `‚Çπ${(costs.food * days * groupMultiplier).toLocaleString()}`,
                activities: `‚Çπ${(costs.activities * days * 0.8).toLocaleString()}`,
                total: `‚Çπ${((costs.accommodation + costs.transport * 0.7 + costs.food * groupMultiplier + costs.activities * 0.8) * days).toLocaleString()}`
            };
        }

        function generateSpecialRecommendations(interests) {
            const recommendations = {
                monasteries: "Visit Rumtek, Pemayangtse, and Enchey monasteries for authentic Buddhist experiences",
                lakes: "Don't miss Tsomgo Lake, Gurudongmar Lake (if accessible), and Khecheopalri Lake",
                trekking: "Consider Goecha La trek, Dzongri trek, or day hikes around Gangtok",
                photography: "Best spots: Tsomgo Lake sunrise, Kanchenjunga views from Pelling, monastery architecture",
                food: "Try authentic momos, thukpa, gundruk, and local Sikkimese cuisine",
                shopping: "Visit MG Marg, local handicraft centers, and monastery gift shops",
                festivals: "Check festival calendar for Losar, Dashain, or monastery festivals during your visit",
                wildlife: "Visit Himalayan Zoological Park for red pandas and other Himalayan wildlife"
            };
            
            return `
                <ul class="mt-2 space-y-1">
                    ${interests.map(interest => `<li>‚Ä¢ ${recommendations[interest] || 'Explore local attractions related to ' + interest}</li>`).join('')}
                </ul>
            `;
        }

        function getSeasonalTips(season) {
            const tips = {
                spring: "Perfect weather for rhododendron blooms and clear mountain views",
                summer: "Monsoon season - expect rain, carry waterproof gear, some roads may be affected",
                autumn: "Excellent weather with clear skies and great visibility of peaks",
                winter: "Cold weather, pack warm clothes, some high-altitude areas may be inaccessible"
            };
            return tips[season] || "Check weather conditions before travel";
        }

        function clearTripForm() {
            document.getElementById('tripBudget').value = '';
            document.getElementById('tripDuration').value = '';
            document.getElementById('tripStyle').value = '';
            document.getElementById('groupSize').value = '';
            document.getElementById('tripSeason').value = '';
            document.getElementById('startingPoint').value = 'gangtok';
            document.getElementById('additionalRequirements').value = '';
            
            // Clear checkboxes
            document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
            
            // Hide generated plan
            document.getElementById('generatedTripPlan').style.display = 'none';
        }

        function editTripPlan() {
            alert('Trip plan editing feature will allow you to modify the generated itinerary, add/remove activities, and adjust the schedule according to your preferences.');
        }

        function downloadTripPlan() {
            const content = document.getElementById('tripPlanContent').textContent;
            const dataBlob = new Blob([content], {type: 'text/plain'});
            const url = URL.createObjectURL(dataBlob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = `sikkim-trip-plan-${new Date().toISOString().split('T')[0]}.txt`;
            link.click();
            
            URL.revokeObjectURL(url);
        }

        function shareTripPlan() {
            const content = document.getElementById('tripPlanContent').textContent;
            
            if (navigator.share) {
                navigator.share({
                    title: 'My Sikkim Trip Plan',
                    text: content,
                    url: window.location.href
                }).catch(console.error);
            } else {
                navigator.clipboard.writeText(content).then(() => {
                    alert('Trip plan copied to clipboard! You can now paste it anywhere to share.');
                }).catch(() => {
                    alert('Unable to copy. Please manually copy the trip plan content.');
                });
            }
        }

        function renderSampleTripPlans() {
            const samplePlans = [
                {
                    title: "Budget Explorer (3 Days)",
                    budget: "‚Çπ8,000 - ‚Çπ12,000",
                    highlights: "Gangtok ‚Ä¢ Tsomgo Lake ‚Ä¢ Local Culture",
                    description: "Perfect for budget travelers wanting to experience Sikkim's highlights"
                },
                {
                    title: "Cultural Heritage (5 Days)",
                    budget: "‚Çπ20,000 - ‚Çπ30,000",
                    highlights: "Monasteries ‚Ä¢ Traditional Villages ‚Ä¢ Local Festivals",
                    description: "Immerse yourself in Sikkim's rich Buddhist and local culture"
                },
                {
                    title: "Adventure Seeker (7 Days)",
                    budget: "‚Çπ35,000 - ‚Çπ50,000",
                    highlights: "Trekking ‚Ä¢ High Altitude Lakes ‚Ä¢ Mountain Passes",
                    description: "For adventure enthusiasts seeking thrills in the Himalayas"
                }
            ];

            const container = document.getElementById('sampleTripPlans');
            container.innerHTML = samplePlans.map(plan => `
                <div class="border rounded-lg p-6 hover:shadow-lg transition-shadow cursor-pointer" onclick="loadSamplePlan('${plan.title}')">
                    <h3 class="font-bold text-lg mb-2">${plan.title}</h3>
                    <div class="text-green-600 font-semibold mb-2">${plan.budget}</div>
                    <div class="text-blue-600 text-sm mb-3">${plan.highlights}</div>
                    <p class="text-gray-600 text-sm">${plan.description}</p>
                    <button class="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors">
                        Use This Plan
                    </button>
                </div>
            `).join('');
        }

        function loadSamplePlan(planTitle) {
            // Pre-fill form based on sample plan
            if (planTitle.includes('Budget')) {
                document.getElementById('tripBudget').value = 'budget';
                document.getElementById('tripDuration').value = '2-3';
                document.getElementById('tripStyle').value = 'relaxed';
            } else if (planTitle.includes('Cultural')) {
                document.getElementById('tripBudget').value = 'mid';
                document.getElementById('tripDuration').value = '4-5';
                document.getElementById('tripStyle').value = 'cultural';
            } else if (planTitle.includes('Adventure')) {
                document.getElementById('tripBudget').value = 'mid';
                document.getElementById('tripDuration').value = '6-7';
                document.getElementById('tripStyle').value = 'adventure';
            }
            
            // Scroll to form
            document.querySelector('.bg-white.rounded-xl.p-8.shadow-lg.mb-8').scrollIntoView({ behavior: 'smooth' });
        }

        // Developer Trip Planner Functions
        function saveBudgetRecommendations() {
            APP.tripPlanner.budgetRecommendations.budget.accommodation = document.getElementById('budgetAccommodation').value;
            APP.tripPlanner.budgetRecommendations.budget.transport = document.getElementById('budgetTransport').value;
            APP.tripPlanner.budgetRecommendations.budget.food = document.getElementById('budgetFood').value;
            
            APP.tripPlanner.budgetRecommendations.mid.accommodation = document.getElementById('midAccommodation').value;
            APP.tripPlanner.budgetRecommendations.mid.transport = document.getElementById('midTransport').value;
            APP.tripPlanner.budgetRecommendations.mid.food = document.getElementById('midFood').value;
            
            APP.tripPlanner.budgetRecommendations.luxury.accommodation = document.getElementById('luxuryAccommodation').value;
            APP.tripPlanner.budgetRecommendations.luxury.transport = document.getElementById('luxuryTransport').value;
            APP.tripPlanner.budgetRecommendations.luxury.food = document.getElementById('luxuryFood').value;
            
            saveToStorage();
            alert('Budget recommendations saved successfully!');
        }

        function saveLocationServices() {
            APP.tripPlanner.locationServices.gangtok = document.getElementById('gangtokServices').value;
            APP.tripPlanner.locationServices.pelling = document.getElementById('pellingServices').value;
            
            saveToStorage();
            alert('Location services saved successfully!');
        }

        function addNewTripTemplate() {
            alert('Trip template creation feature will allow you to create custom trip templates with specific itineraries, costs, and recommendations.');
        }

        function loadTripPlannerConfig() {
            // Load budget recommendations into developer form
            if (document.getElementById('budgetAccommodation')) {
                document.getElementById('budgetAccommodation').value = APP.tripPlanner.budgetRecommendations.budget.accommodation;
                document.getElementById('budgetTransport').value = APP.tripPlanner.budgetRecommendations.budget.transport;
                document.getElementById('budgetFood').value = APP.tripPlanner.budgetRecommendations.budget.food;
                
                document.getElementById('midAccommodation').value = APP.tripPlanner.budgetRecommendations.mid.accommodation;
                document.getElementById('midTransport').value = APP.tripPlanner.budgetRecommendations.mid.transport;
                document.getElementById('midFood').value = APP.tripPlanner.budgetRecommendations.mid.food;
                
                document.getElementById('luxuryAccommodation').value = APP.tripPlanner.budgetRecommendations.luxury.accommodation;
                document.getElementById('luxuryTransport').value = APP.tripPlanner.budgetRecommendations.luxury.transport;
                document.getElementById('luxuryFood').value = APP.tripPlanner.budgetRecommendations.luxury.food;
                
                document.getElementById('gangtokServices').value = APP.tripPlanner.locationServices.gangtok;
                document.getElementById('pellingServices').value = APP.tripPlanner.locationServices.pelling;
            }
        }
    </script>

<script>
(function(){
  let offlineMap = null, userMarker = null, spotMarker = null, geoWatchId = null;

  window.openOfflineMap = function(){
    const modal = document.getElementById('offlineMapModal');
    modal.classList.add('active');

    let spotLat = 27.3314, spotLon = 88.6138; // fallback
    try {
      if (window.APP && APP.currentPlace) {
        const p = APP.currentPlace;
        if (p.lat) { spotLat = parseFloat(p.lat); spotLon = parseFloat(p.lon); }
        else if (p.latitude) { spotLat = parseFloat(p.latitude); spotLon = parseFloat(p.longitude); }
      }
    } catch(e){}

    if (!offlineMap) {
      offlineMap = L.map('offlineMapContainer').setView([spotLat, spotLon], 16);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 19 }).addTo(offlineMap);

      // Tourist spot marker
      spotMarker = L.marker([spotLat, spotLon]).addTo(offlineMap);

      // GPS tracking (continuous)
      if (navigator.geolocation) {
        geoWatchId = navigator.geolocation.watchPosition(function(pos){
          const latlng = [pos.coords.latitude, pos.coords.longitude];

          if (!userMarker) {
            userMarker = L.circleMarker(latlng, {
              radius: 8,
              fillColor: 'blue',
              color: '#fff',
              weight: 2,
              fillOpacity: 0.9
            }).addTo(offlineMap);
          } else {
            userMarker.setLatLng(latlng);
          }

          // Center map on user each time he moves
          offlineMap.setView(latlng, offlineMap.getZoom());
        }, function(err){
          console.warn('GPS error:', err);
        }, { enableHighAccuracy: true, maximumAge: 1000, timeout: 10000 });
      }
    } else {
      offlineMap.setView([spotLat, spotLon], 16);
      if (spotMarker) spotMarker.setLatLng([spotLat, spotLon]);
    }

    setTimeout(()=>offlineMap.invalidateSize(),200);
  };

  window.closeOfflineMap = function(){
    const modal = document.getElementById('offlineMapModal');
    modal.classList.remove('active');
    // Optional: stop GPS tracking when closing
    if (geoWatchId && navigator.geolocation) {
      navigator.geolocation.clearWatch(geoWatchId);
      geoWatchId = null;
    }
  };
})();
</script>

<div class="modal" id="mapModal">
<div class="bg-white w-full h-full relative">
<button class="absolute top-4 left-4 bg-gray-800 text-white px-4 py-2 rounded-lg z-50" onclick="closeMapModal()">‚Üê Back</button>
<div class="w-full h-full" id="mapContainer"></div>
</div>
</div>
<script>
let map, userMarker, placeMarker;

function openMapModal(place) {
    document.getElementById("mapModal").classList.add("active");

    if (!map) {
        map = L.map('mapContainer').setView([27.3314, 88.6138], 13);

        // Offline/online tiles (replace with offline tiles in APK)
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 18,
            attribution: '¬© OpenStreetMap'
        }).addTo(map);

        userMarker = L.marker([27.3314, 88.6138]).addTo(map)
            .bindPopup("You are here");
    }

    if (placeMarker) {
        map.removeLayer(placeMarker);
    }

    // If place lat/lon provided, center there
    if (place && place.lat && place.lon) {
        placeMarker = L.marker([place.lat, place.lon]).addTo(map)
            .bindPopup(place.name || "Tourist Spot");
        map.setView([place.lat, place.lon], 14);
    }

    // Track user GPS live
    if (navigator.geolocation) {
        navigator.geolocation.watchPosition(function(pos) {
            let lat = pos.coords.latitude;
            let lon = pos.coords.longitude;
            userMarker.setLatLng([lat, lon]);
        }, function(err) {
            console.log("GPS error: " + err.message);
        }, { enableHighAccuracy: true });
    }
}

function closeMapModal() {
    document.getElementById("mapModal").classList.remove("active");
}
</script>

<script>
// Patch: Add Map button dynamically when a tourist spot modal is opened
function addMapButtonToModal(place) {
    const modalActions = document.querySelector("#exploreModal .flex.flex-wrap");

    if (!modalActions) return;

    // Remove old map button if exists
    let oldBtn = document.getElementById("mapBtn");
    if (oldBtn) oldBtn.remove();

    // Create new map button
    let mapBtn = document.createElement("button");
    mapBtn.id = "mapBtn";
    mapBtn.innerText = "üó∫ Map";
    mapBtn.className = "bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors";
    mapBtn.onclick = () => openMapModal(place);

    // Append button
    modalActions.appendChild(mapBtn);
}
</script>

<!-- ‚úÖ Offline Map Modal -->
<div class="modal" id="offlineMapModal">
  <div class="bg-white rounded-xl max-w-4xl w-full mx-4 h-[90vh] overflow-hidden">
    <div class="sticky top-0 bg-white border-b p-4 flex justify-between items-center">
      <h2 class="text-xl font-bold">Offline Map</h2>
      <button class="text-blue-600 hover:text-blue-800" onclick="closeOfflineMap()">‚Üê Back</button>
    </div>
    <div id="offlineMapContainer" style="height:calc(90vh - 56px); width:100%;"></div>
  </div>
</div>


<script>
(function(){
  let offlineMap = null, userMarker = null, spotMarker = null, geoWatchId = null;

  window.openOfflineMap = function(){
    const modal = document.getElementById('offlineMapModal');
    modal.classList.add('active');

    let spotLat = 27.3314, spotLon = 88.6138; // fallback
    try {
      if (window.APP && APP.currentPlace) {
        const p = APP.currentPlace;
        if (p.lat) { spotLat = parseFloat(p.lat); spotLon = parseFloat(p.lon); }
        else if (p.latitude) { spotLat = parseFloat(p.latitude); spotLon = parseFloat(p.longitude); }
      }
    } catch(e){}

    if (!offlineMap) {
      offlineMap = L.map('offlineMapContainer').setView([spotLat, spotLon], 16);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 19 }).addTo(offlineMap);
      spotMarker = L.marker([spotLat, spotLon]).addTo(offlineMap);

      if (navigator.geolocation) {
        geoWatchId = navigator.geolocation.watchPosition(function(pos){
          const latlng = [pos.coords.latitude, pos.coords.longitude];
          if (!userMarker) {
            userMarker = L.circleMarker(latlng, { radius: 8, fillColor: 'blue', color: '#fff', weight: 2, fillOpacity: 0.9 }).addTo(offlineMap);
          } else {
            userMarker.setLatLng(latlng);
          }
        }, function(err){ console.warn(err); }, { enableHighAccuracy: true });
      }
    } else {
      offlineMap.setView([spotLat, spotLon], 16);
      if (spotMarker) spotMarker.setLatLng([spotLat, spotLon]);
    }

    setTimeout(()=>offlineMap.invalidateSize(),200);
  };

  window.closeOfflineMap = function(){
    const modal = document.getElementById('offlineMapModal');
    modal.classList.remove('active');
  };
})();
</script>

</body>
</html>
